          Ассемблер для IBM PC. Глава 13                             1


          
          ГЛАВА 13
          ------------------------------------------------------------
          
          Арифметические операции II:
          Обработка данных в форматах ASCII и BCD
          
          Цель: Рассмотреть ASCII и BCD форматы данных и дать сведения
          о преобразованиях между этими форматами и двоичным форматом.
          
          ВВЕДЕНИЕ
          ------------------------------------------------------------
             
             Для   получения   высокой   производительности  компьютер
          выполняет aрифметические  операции  над  числами  в двоичном
          формате.  Как показано в главе 12,  этот формат  не вызывает
          особых трудностей, если данные определены в самой программе.
          Во  многих  случаях  новые  данные  вводятся   программой  с
          клавиатуры  в  виде  ASCII  символов  в  деcятичном формате.
          Аналогично  вывод  информации  на  экран   осуществляется  в
          кодах  ASCII.  Например,  число 23  в двоичном представлении
          выглядит  как 00010111  или шест.17;  в коде ASCII на каждый
          cимвол требуется один  байт  и число 25  в  ASCII-коде имеет
          внутpеннее представление шест.3235.
             Назначение данной главы - показать технику преобразования
          данных из  ASCII-формата в  двоичный  формат  для выполнения
          арифметических операций и  обратного преобразования двоичных
          результатов в ASCII-формат для вывода на экран  или принтер.
          Программа, приведенная в конце главы , демонстрирует большую
          часть матеpиала от главы 1 до главы 12.
             При программировании на языках высокого уровня, таких как
          BASIC или Pascal,  для обозначения порядка  числа или положе
          ния  десятичной   запятой   (точки)   можно   положиться  на
          кампилятор.   Однако,  компьютер  не  распознает  десятичную
          запятую (точку)  в  арифметических  полях.  Так как двоичные
          числа   не  имеют  возможности  установки   десятичной  (или
          двоичной)  запятой  (точки),  то  именно  программист должен
          подразумевать и определить порядок обрабатываемых чисел.
          
          ASCII-формат
          ------------------------------------------------------------
             
             Данные,   вводимые  с   клавиатуры,  имеют  ASCII-формат,
          например,   буквы  SAM  имеют   в  памяти  шестнадцатиричное
          представление 53414D, цифры 1234 - шест. 31323334. Во многих
          случаях  формат  алфавитных  данных,  например, имя человека
          или  описание  статьи,  не  меняется  в  программе.  Но  для
          выполнения арифметических операций над числовыми значениями,
          такими как шест. 31323334, требуется специальная обработка.
             С помощью следующих ассемблерных  команд  можно выполнять
          арифметические  операции  непосредственно   над   числами  в
          ASCII-формате:
             

          
          Ассемблер для IBM PC. Глава 13                             2


                    AAA (ASCII Adjust for Addition -
                              коррекция для сложения ASCII-кода)
                    AAD (ASCII Adjust for Division -
                              коррекция для деления ASCII-кода)
                    AAM (ASCII Adjust for Multiplication -
                              коррекция для умножения ASCII-кода)
                    AAS (ASCII Adjust for Subtraction -
                              коррекция для вычитания ASCII-кода)
          
          Эти команды кодируются без операндов и выполняют автоматичес
          кую коррекцию в регистре  AX.  Коррекция необходима, так как
          ASCII   код   представляет   так   называемый  распакованный
          десятичный  формат,  в  то  время,  как  компьютер выполняет
          арифметические операции в двоичном формате.
             
             Сложение в ASCII-формате
             
             Рассмотрим процесс сложения чисел 8 и 4 в ASCII-формате:
             
                                   Шест.     38
                                             34
                                   Шест.     6C
          
          Полученная  сумма неправильна ни  для ASCII-формата,  ни для
          двоичного формата.  Однако, игноригуя левую 6 и прибавив 6 к
          правой  шест.C:  шест.C +  6  = шест.12 - получим правильный
          результат  в десятичном  формате.  Правильный  пример слегка
          упрощен, но он хорошо демонстрирует процесс, который выполня
          ет команда AAA при коррекции.
             В качестве примера,  предположим, что регистр AX содержит
          шест.  0038,  а  регистр  BX  -  шест.0034.  Числа  38  и 34
          представляют два  байта в ASCII формате,  которые необходимо
          сложить.   Сложение   и   коррекция   кодируется  следующими
          командами:
             
                    ADD  AL,BL     ;Сложить 34 и 38
                    AAA            ;Коррекция для сложения ASCII кодов
          
          Команда AAA проверяет правую шест. цифру (4 бита) в регистре
          AL.  Если эта цифра находится между A и F или флаг  AF равен
          1,  то  к  регистру  AL  прибавляется  6,  а  к  регистру AH
          прибавляется 1,  флаги AF и CF устанавливаются в  1. Во всех
          случаях  команда AAA устанавливает в 0  левую  шест. цифру в
          регистре AL. Результат - в регистре AX:
          
                         После команды ADD:  006C
                         После команды AAA:  0102
             
             Для  того,  чтобы выработать окончательное ASCII-представ
          ление,  достаточно  просто  поставить тройки  на место левых
          шест. цифр:
                         OR   AX,3030H  ;Результат 3132
             

          
          Ассемблер для IBM PC. Глава 13                             3


             Все показанное  выше  представляет  сложение однобайтовых
          чисел.  Сложение многобайтовых  ASCII-чисел требует организа
          ции  цикла,  который  выполняет  обработку  справа  налево с
          учетом переноса.  Пример , показанный на рис.13.1 складывает
          два  трехбайтовых  ASCII-числа   в   четырехбайтовую  сумму.
          Обратите внимание на следующее:
          
          ▀    В программе используется  команда  ADC,  так  как любое
               сложение  может вызвать  перенос,  который  должен быть
               прибавлен  к  следующему  (слева)  байту.  Команда  CLC
               устанавливает флаг CF в нулевое состояние.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
                    Рис. 13.1. Сложение в ASCII-формате.
          
          ▀    Команда MOV очищает регистр AH в каждом цикле,  так как
               команда AAA может   прибавить к  нему  единицу. Команда
               ADC  учитывает  пеpеносы.  Заметьте,  что использование
               команд  XOR или SUB   для oчистки регистра  AH изменяет
               флаг CF.
          ▀    Когда  завершается  каждый  цикл,  происходит пересылка
               содержимого  pегистра  AH  (00  или  01)  в  левый байт
               суммы.
          ▀    В результате получается сумма в  виде 01020702. Програм
               ма  не  использует  команду OR  после  команды  AAA для
               занесения левой тройки,  так как при этом устанавливает
               ся флаг CF, что изменит pезультат команды ADC. Одним из
               решений в данном  случае  является сохранение флагового
               регистра  с   помощью команды PUSHF, выполнение команды
               OR,   и,   затем,   восстановление  флагового  регистра
               командой POPF:
             
                         ADC  AL,[DI]   ;Сложение с переносом
                         AAA            ;Коррекция для ASCII
                         PUSHF          ;Сохранение флагов
                         OR   AL,30H    ;Запись левой тройки
                         POPF           ;Восстановление флагов
                         MOV  [BX],AL   ;Сохранение суммы
             
             Вместо  команд  PUSHF и POPF  можно  использовать команды
          LAHF (Load AH with Flags -  загрузка флагов в регистр  AH) и
          SAHF (Store AH in Flag register - запись флагов  из регистра
          AH во флаговый регистр). Команда LAHF загружает в регистр AH
          флаги  SF,  ZF,  AF,  PF и  CF;  а  команда  SAHF записывает
          содержимое регистра  AH  в  указанные  флаги.  В приведенном
          примере,   однако,   регистр   AH   уже   используется   для
          арифметических переполнений. Другой способ вставки троек для
          получения  ASCII-кодов цифр  -  организовать обработку суммы
          командой OR в цикле.
             
             Вычитание в ASCII-формате
             

          
          Ассемблер для IBM PC. Глава 13                             4


             Команда AAS (ASCII Adjust for Subtraction - коррекция для
          вычитания  ASCII-кодов)  выполняется aналогично команде AAA.
          Команда AAS  проверяет  правую  шест.цифру  (четыре  бита) в
          регистре AL.  Если эта цифра лежит между A и F  или  флаг AF
          равен 1,  то из регистра AL вычитается  6,  а из регистра AH
          вычитается 1,  флаги AF  и CF  устанавливаются в 1.  Во всех
          случаях команда AAS устанавливает  в  0  левую  шест.цифру в
          регистpе AL.
             В следующих  двух примерах предполагается,  что поле ASC1
          содержит шест.38, а поле ASC2 - шест.34:
             
                    Пример 1:                  AX      AF
                         MOV  AL,ASC1        ;0038
                         SUB  AL,ASC2        ;0034     0
                         AAS                 ;0004     0
             
                    Пример 2:                  AX      AF
                         MOV  AL,ASC2        ;0034
                         SUB  AL,ASC1        ;00FC     1
                         AAS                 ;FF06     1
          
          В примере 1  команде AAS не требуется выполнять коррекцию. В
          примере 2,  так как правая цифра в регистре AL равна шест.C,
          команда AAS вычитает 6  из регистра AL и 1  из регистра AH и
          устанавливает   в 1 флаги AF и CF. Результат (который должен
          быть равен  -4) имеет шест. представление FF06, т.е. десятич
          ное дополнение числа -4.
             
             Умножение в ASCII-формате
             
             Команда AAM (ASCII Adjust for Multiplication  - коррекция
          для   умножения   ASCII   кодов)   выполняет   корректировку
          результата умножения  ASCII  кодов  в  регистре  AX. Однако,
          шест. цифры должны быть очищены от троек и полученные данные
          уже  не  будут  являться  действительными  ASCII-кодами.  (В
          руководствах  фирмы   IBM  для  таких   данных  используется
          термин pаспакованный десятичный  формат).  Например, число в
          ASCII-формате   31323334   имеет   распакованное  десятичное
          представление  01020304.  Кроме  этого,  надо  помнить,  что
          коррекция  осуществляется  только  для одного  байта за одно
          выполнение,  поэтому  можно  умножать  только  oдно-байтовые
          поля; для более длинных полей необходима  организация цикла.
             Команда AAM делит содержимое регистра AL на 10 (шест. 0A)
          и  записывает  частное  в  регистр  AH,   а  остаток  в  AL.
          Предположим,  что  в регистре  AL  содержится шест.  35, а в
          регистре CL - шест.39. Следующие команды умножают содержимое
          регистра  AL  на  содержимое  CL  и преобразуют  результат в
          ASCII-формат:
             
                                                                 AX:
                    AND  CL,0FH    ;Преобразовать CL в 09
                    AND  AL,0FH    ;Преобразовать AL в 05        0005
                    MUL  CL        ;Умножить AL на CL            002D

          
          Ассемблер для IBM PC. Глава 13                             5


                    AAM            ;Преобразовать в распак.дес.  0405
                    OR   AX,3030H  ;Преобразовать в ASCII-ф-т    3435
          
          Команда MUL генерирует 45  (шест.002D)  в регистре AX, после
          чего команда AAM делит это значение на 10, записывая частное
          04  в регистр AH и остаток 05 в регистр AL. Команда OR преоб
          pазует затем распакованное десятичное число в ASCII-формат.
             Пример  на  рис.13.2   демонстрирует  умножение  четырех-
          байтового  множимого  на  одно-байтовый  множитель.  Так как
          команда AAM может иметь дело только с однобайтовыми числами,
          то в программе организован цикл,  который обрабатывает байты
          справа  налево.  Окончательный результат  умножения в данном
          примере - 0108090105.
             Если   множитель  больше  одного   байта,  то  необходимо
          обеспечить еще один цикл,  который обрабатывает множитель. В
          этом случае проще будет преобразовать число из ASCII-формата
          в  двоичный  формат  (см.  следующий  раздел "Преобразование
          ASCII-формата в двоичный формат").
             
          ------------------------------------------------------------
          ------------------------------------------------------------
                    Рис.13.2. Умножение в ASCII-формате.
             
             Деление в ASCII-формате
             
             Команда AAD (ASCII  Adjust  for Division  - коррекция для
          деления  ASCII-кодов)  выполняет  корректировку  ASCII  кода
          делимого   до  непосредственного   деления.  Однако,  прежде
          необходимо  очистить левые тройки ASCII-кодов  для получения
          распакованного  десятичного   формата.   Команда  AAD  может
          оперировать   с   двухбайтовыми  делимыми   в  регистре  AX.
          Предположим,  что регистр AX содержит делимое 3238  в ASCII-
          формате  и регистр CL  содержит  делитель 37  также в ASCII-
          формате.  Следующие команды выполняют коррекцию для последую
          щего деления:
                                                                 AX:
               AND  CL,0FH    ;Преобразовать CL в распак.дес.
               AND  AX,0F0FH  ;Преобразовать AX в распак.дес.    0208
               AAD            ;Преобразовать в двоичный          001C
               DIV  CL        ;Разделить на 7                    0004
          
          Команда  AAD   умножает  содержимое  AH  на   10  (шест.0A),
          прибавляет pезультат 20  (шест.14)  к регистру AL  и очищает
          регистр AH.  Значение 001C есть шест.  представление десятич
          ного числа 28. Делитель может быть только однобайтовый от 01
          до 09.
             Пример на рис. 13.3. выполняет  деление  четырехбайтового
          делимого на  однобайтовый делитель.  В программе организован
          цикл  обработки делимого  справа налево.  Остатки от деления
          находятся  в регистре  AH  и команда AAD  корректирует  их в
          регистре AL.  Окончательный pезультат:  частное 00090204 и в
          регистре AH остаток 02.


          
          Ассемблер для IBM PC. Глава 13                             6


             Если делитель  больше одного байта,  то необходимо постро
          ить другой цикл для обработки делителя,  но  лучше воспользо
          ваться  следующим разделом  "Преобразование  ASCII-формата в
          двоичный формат."
          
          ДВОИЧНО-ДЕСЯТИЧНЫЙ ФОРМАТ (BCD)
          ------------------------------------------------------------
          
             В   предыдущем  примере  деления  в   ASCII-формате  было
          получено частное 00090204. Если сжать это значение, сохраняя
          только правые  цифры каждого байта,  то  получим 0924. Такой
          формат называется  двоично-десятичным  (BCD  -  Binary Coded
          Decimal)  (или  упакованным).  Он содержит только десятичные
          цифры от 0  до 9.  Длина двоично-десятичного представления в
          два раза меньше ASCII-представления.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
                    Рис.13.3. Деление в ASCII-формате.
          
          Заметим,  однако, что  десятичное число 0924 имеет основание
          10  и,  будучи  преобразованным в основание 16 (т.е. в шест.
          представление), даст шест.039C.
             Можно   выполнять   сложение   и    вычитание   чисел   в
          двоично-десятичном  представлении  (BCD-формате).  Для  этих
          целей имеются две корректиpующих команды:
             
                    DAA  (Decimal Adjustment for Addition -
                              десятичная коррекция для сложения)
                    DAS  (Decimal Adjustment for Subtraction -
                              десятичная коррекция для вычитания)
             
             Обработка полей также осуществляется  по  одному байту за
          одно выполнение.  В  примере программы,  приведенном на рис.
          13.4,  выполняется  преобразование чисел  из ASCII-формата в
          BCD-формат  и  сложение  их.  Процедура  B10CONV преобразует
          ASCII в BCD.  Обработка чисел может  выполняться  как справа
          налево,  так  и слева направо.  Кроме  того,  обработка слов
          проще,  чем обработка байтов,  так как  для генерации одного
          байта BCD-кода требуется два байта ASCII-кода. Ориентация на
          обработку слов  требует четного количества  байтов  в ASCII-
          поле.
             Процедура C10ADD выполняет сложение чисел  в BCD-формате.
          Окончательный результат - 127263.
          
          ПРЕОБРАЗОВАНИЕ ASCII-ФОРМАТА В ДВОИЧНЫЙ ФОРМАТ
          ------------------------------------------------------------
             
             bыполнение арифметических  операций  над числами  в ASCII
          или BCD форматах  удобно  лишь  для коротких  полей.  В боль
          шинстве  случаев  для  арифметических  операций используется
          преобразование   в   двоичный   формат.   Практически  проще


          
          Ассемблер для IBM PC. Глава 13                             7


          преобразование  из ASCII-формата  непосредственно в двоичный
          формат,  чем преобразование из ASCII- в BCD-формат и, затем,
          в двоичный формат:
             Метод преобразования базируется на  том, что ASCII-формат
          имеет  основание 10,  а  компьютер  выполняет арифметические
          операции  только  над  числами  с  основанием  2.  Процедура
          преобразования заключается в следующем:
          
          1.   Начинают с самого правого байта числа в ASCII-формате и
               обрабатывают справа налево.
          2.   Удаляют тройки из левых шест.цифр каждого ASCII-байта.
          3.   Умножают  ASCII-цифры на 1,  10,  100 (шест.1, A, 64) и
               т.д. и складывают результаты.
             
             Для  примера  рассмотрим  преобразование  числа  1234  из
          ASCII-формата в двоичный формат:
             
                                   Десятичное     Шестнадцатиричное
             
                    4 х 1 =                4              4
                    3 х 10 =              30             1E
                    2 х 100 =            200             C8
                    1 х 1000 =          1000            3E8
                    Результат:                         04D2
             
          ------------------------------------------------------------
          ------------------------------------------------------------
                    Рис. 13.4. BCD-преобразование и арифметика.
          
          Проверьте,   что   шест.04D2   действительно   соответствует
          десятичному  1234.   На  рис.   13.5.  в  процедуре  B10ASBI
          выполняется преобразоние ASCII-числа 1234 в двоичный формат.
          В  примере предполагается,  что длина ASCII-числа  равна 4 и
          она записана в  поле ASCLEN.  Для инициализации адрес ASCII-
          поля ASCVAL-1  заносится в регистр  SI,  а длина - в регистр
          BX. Команда по метке B20 пересылает ASCII-байт в регистр AL:
          
                              MOV  AL,[SI+BX]
          
          Здесь используется  адрес ASCVAL-1  плюс содержимое регистра
          BX (4),  т.е.  получается адрес ASCVAL+3  (самый правый байт
          поля  ASCVAL).   В  каждом  цикле   содержимое  регистра  BX
          уменьшается на  1,  что приводит  к  обращению  к следующему
          слева байту. Для данной адресации можно использовать регистр
          BX,  но не  CX,  и,  следовательно, нельзя применять команду
          LOOP.  В каждом цикле происходит также умножение поля MULT10
          на  10,  что  дает  в результате  множители 1,10,100  и т.д.
          Такой  прием  применен  для  большей  ясности,  однако,  для
          большей   производительности  множитель   можно   хранить  в
          регистре SI или DI.
          
          ПРЕОБРАЗОВАНИЕ ДВОИЧНОГО ФОРМАТА В ASCII-ФОРМАТ
          ------------------------------------------------------------

          
          Ассемблер для IBM PC. Глава 13                             8


             
             Для  того,  чтобы  напечатать  или  отобразить  на экране
          арифметический  pезультат,  необходимо  преобразовать  его в
          ASCII-формат.   Данная  операция  включает  в  себя  процесс
          обратный предыдущему.  Вместо умножения используется деление
          двоичного числа на  10  (шест.  0A)  пока результат не будет
          меньше 10.  Остатки,  которые  лежат в границах  от  0 до 9,
          образуют   число   в   ASCII-формате.   В  качестве  примера
          рассмотрим  преобразование  щест.4D2  обратно  в  десятичный
          формат:
                                      Частное       Остаток
                         4D2 : A        7B             4
                          7B : A         C             3
                           C : A         1             2
          
          Так как последнее частное 1  меньше, чем шест.A, то операция
          завершена.  Остатки  вместе  с  последним  частным  образуют
          результат в ASCII-формате,  записываемый справа налево 1234.
          Все остатки и последнее частное должны записываться в память
          с тройками, т.е. 31323334.
             На  рис.  13.5.  процедура C10BIAS  преобразует шест. 4D2
          (результат  вычисления  в процедуре  B10ASBI)  в ASCII-число
          1234.   Полезно  переписать  всю  программу   (рис.13.5.)  в
          компьютер и выполнить трассиpовку ее выполнения по шагам.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
               Рис.13.5. Преобразование ASCII и двоичного форматов.
          
          СДВИГ И ОКРУГЛЕНИЕ
          ------------------------------------------------------------
             
             Рассмотрим  процесс округления  числа до  двух десятичных
          знаков   после   запятой.   Если  число  равно   12,345,  то
          необходимо прибавить  5  к отбрасываемому разряду и сдвинуть
          число вправо на один десятичный разряд:
             
                         Число:              12,345
                         Плюс 5:                 +5
                         Округленное число:  12,350 = 12,35
             
             Если  округляемое  число  равно  12,3455,  то  необходимо
          прибавить  50  и сдвинуть  на  два  десятичных  разряда. Для
          12,34555   необходимо  прибавить  500   и  сдвинуть  на  три
          десятичных разряда:
             
                              12,3455             12,34555
                                  +50                 +500
                              12,3505 = 12,35     12,35055 = 12,35
          
          К числу,  имеющему  шесть знаков  после  запятой, необходимо
          прибавить  5000  и сдвинуть  на четыре десятичных  разряда и
          т.д. Поскольку данные представляются в компьютере в двоичном

          
          Ассемблер для IBM PC. Глава 13                             9


          виде,  то 12345  выглядит как шест.3039. Прибавляя 5 к 3039,
          получим  303E,  что  соответствует числу 12350  в десятичном
          представлении.  Пока все хорошо.  Но вот сдвиг на одну двоич
          ную цифру дает в результате шест.181F, или 1675 - т.е. сдвиг
          на одну  двоичную цифру  просто делит число  пополам. Но нам
          необходим  такой сдвиг,  который эквивалентен  сдвигу вправо
          на  одну  десятичную  цифру.  Такой сдвиг  можно осуществить
          делением на 10 (шест.A):
          
                    Шест.303E : Шест.A = 4D3 или дес.1235
          
          Преобразование  шест.4D3  в  ASCII-формат  дает  число 1235.
          Теперь oстается  лишь вставить запятую в  правильную позицию
          числа 12,35, и можно выдать на экран округленное и сдвинутое
          значение.
             Таким образом   можно округлять и сдвигать любые двоичные
          числа.  Для трех знаков после запятой необходимо прибавить 5
          и  разделить  на  10,  для  четырех  знаков  после  запятой:
          прибавить  50  и  pазделить  на  100.  Возможно  вы заметили
          модель:  фактор  округления  (5,  50,  500  и  т.д.)  всегда
          составляет половину фактора сдвига (10, 100, 1000 и т.д.).
             Конечно,  десятичная  запятая  в  двоичном  числе  только
          подpазумевается.
          
          ПРОГРАММА: ПРЕОБРАЗОВАНИЕ ВРЕМЕНИ И РАСЦЕНКИ РАБОТ
                     ДЛЯ РАСЧЕТА ЗАРПЛАТЫ
          ------------------------------------------------------------
             
             Программа,  приведенная на рис.13.6,  позволяет вводить с
          клавиатуры  значения  продолжительности и  расценки  работ и
          отображать  на  экран   pасчитанную   величину  заработанной
          платы.  Для краткости в программе опущены некоторые проверки
          на ошибку. Программа содержит следующие процедуры:
          
          B10INPT   Вводит значения  времени работы  на  ее расценку с
                    клавиатуры.  Эти значения могут  содержать десятич
                    ную запятую.
          D10HOUR   Выполняет преобразование значения времени из ASCII
                    в двоичный формат.
          E10RATE   Выполняет  преобразование   значения  расценки  из
                    ASCII в двоичный формат.
          F10MULT   Выполняет умножение,  округление и сдвиг. Величина
                    зарплаты без дробной части или с  одним  или двумя
                    знаками после запятой не требует округления и сдви
                    га. Данная процедура ограничена тем, что позволяет
                    обрабатывать  величину  зарплаты  с  точностью  до
                    шести десятичных знаков, что, конечно, больше, чем
                    требуется.
          G10WAGE   Вставляет  десятичную  запятую,  определяет правую
                    позицию   для  начала  записи   ASCII  символов  и
                    преобразует   двоичное    значение    зарплаты   в
                    ASCII-формат.


          
          Ассемблер для IBM PC. Глава 13                            10


          K10DISP   Заменяет  лидирующие  нули  на  пробелы  и выводит
                    результат на экран.
          M10ASBI   Преобразует  ASCII   в   двоичный   формат  (общая
                    процедура  для времени  и  расценки)  и определяет
                    число цифр после запятой в введенном значении.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
                    Рис.13.6. Расчет заработной платы.
             
             Ограничения.  Первое ограничение в программе, приведенной
          на  рис.13.6,   cостоит в том,  что допускает не более шести
          десятичных знаков после запятой. Другое ограничение - размер
          самой  зарплаты  и тот факт,  что сдвиг  включает деление на
          число,   кратное    10,   a  преобразование  в  ASCII-формат
          включает деление на   10. Если значение времени или расценки
          содержит больше   шести десятичных знаков или зарплата превы
          шает  величину  около   655350,  то программа выдает нулевой
          результат.  На   практике  программа  может  предусмотреть в
          данном  случае  вывод предупреждающего  сообщения  или иметь
          подпрограммы для  исключения таких ограничений.
             
             Контроль ошибок.  Программа, разработанная для пользовате
          лей,    не  являющихся  программистами,   должна  не  только
          выдавать   предупреждающие  сообщения,  но  также  проверять
          корректность  вводимых  значений.  Правильными символами при
          вводе числовых значений  являются цифры  от 0  до 9 и символ
          десятичной  запятой.  Для  любых  других  символов программа
          должна выдать  предупреждающее сообщение  и  вновь повторить
          запрос на ввод.  Полезной командой для проверки корректности
          вводимых символов является XLAT (см. главу 14).
             Тщательно  проверяйте  программы   для   любых  возможных
          состояний:  нулевое значение,  максимально  большие  и малые
          значения, отрицательные значения.
             
             Отрицательные величины
             
             Некоторые   применения    программ    допускают   наличие
          отрицательных  величин.  Знак  минус  может  устанавливаться
          после числа,  например,  12,34-,  или  перед  числом -12,34.
          Программа    может    проверять     наличие    минуса    при
          преобразовании  в двоичный  формат.  Можно оставить двоичное
          число положительным, но установить соответствующий индикатор
          исходной    отрицательной    величины.    После   завершения
          арифметических  операций знак минус при  необходимости может
          быть вставлен в ASCII поле.
             Если   необходимо,   чтобы  двоичное   число  было  также
          отрицательным,   то   можно   преобразовать,   как   обычно,
          ASCII-формат в двоичный,  а  для  изменения  знака двоичного
          числа  воспользоваться  командами,  описанными  в  главе  12
          "Преобразование знака". Будьте внимательны при использовании



          
          Ассемблер для IBM PC. Глава 13                            11


          команд  IMUL  и  IDIV  для  обработки  знаковых  данных. Для
          округления  отрицательных  чисел  следует  не  прибавлять, а
          вычитать фактор 5.
          
          ОСНОВНЫЕ ПОЛОЖЕНИЯ НА ПАМЯТЬ
          ------------------------------------------------------------
             
          ▀    ASCII-формат требует один  байт на каждый  символ. Если
               поле содержит только цифры от 0 до 9, то замена старших
               троек  в каждом  байте  на  нули  создает распакованный
               десятичный  формат.  Сжатие числа до двух цифр  в байте
               создает  упакованный  десятичный  формат.
          
          ▀    После  ASCII-сложения необходимо выполнить  коррекцию с
               помощью команды AAA;  после ASCII-вычитания - коррекция
               с  помощью команды  AAS.
          
          ▀    Прежде   чем   выполнить   ASCII-умножение,  необходимо
               преобразовать  множимое  и  множитель  в "распакованный
               десятичный"   формат,  обнулив  в  каждом  байте  левые
               тройки.  После умножения необходимо выполнить коррекцию
               результата с помощью команды AAM.
          
          ▀    Прежде  чем  выполнить   ASCII-деление,  необходимо: 1)
               преобразовать  делимое  и  делитель   в  "распакованный
               десятичный" формат, обнулив в каждом байте левые тройки
               и 2)  выполнить коррекцию  делимого  с  помощью команды
               AAD.
          
          ▀    Для  большинства  арифметических  операций  используйте
               преобразование   чисел  из   ASCII-формата  в  двоичной
               формат.  В процессе такого преобразования проверяйте на
               корректность ASCII-символы:  они должны быть от шест.30
               до шест.39,  могут содержать десятичную запятую (точку)
               и, возможно, знак минус.
          
          ВОПРОСЫ ДЛЯ САМОПРОВЕРКИ
          ------------------------------------------------------------
          
          13.1. Предположим, что регистр AX содержит 9 в ASCII коде, а
                регистр  BX -7  также в ASCII коде.  Объясните и дайте
                точный результат для следующих несвязанных операций:
          
                    а)   ADD  AX,33H         б)   ADD  AX,BX
                         AAA                      AAA
                    в)   SUB  AX,BX          г)   SUB  AX,0DH
                         AAS                      AAS
          
          13.2. Поле  UNPAK содержит  шест.  01040705  в распаковочном
                десятичном формате. Напишите цикл, который преобразует
                это содержимое в ASCII-формат, т.е. 31343735.
          


          
          Ассемблер для IBM PC. Глава 13                            12


          13.3. Поле ASCA содержит значение 313733  в ASCII-формате, а
                другое  поле  ASCB  содержит 35.  Напишите команды для
                умножения   этих  чисел   в   ASCII-формате  и  записи
                произведения в поле ASCPRO.
          
          13.4. Используя  данные  из вопроса 13.3,  разделите ASCA на
                ASCB и запишите частное в поле ASCQUO.
          
          13.5. Выполните следующие вычисления  вручную:  а) преобразо
                вать  ASCII  46328   в  двоичный   формат  и  показать
                результат  в  шест.виде;  б)  преобразовать полученное
                шест.значение обратно в ASCII-формат.
          
          13.6. Напишите  и  выполните  программу,  которая определяет
                размер   памяти  компьютера  (INT   12H   -  см.гл.2),
                преобразует  полученное  значение   в  ASCII-формат  и
                выводит результат на экран в следующем виде:
          
                              Размер памяти nnn байтов.



































          
