          Ассемблер для IBM PC                                       1


          
          ГЛАВА 1
          ------------------------------------------------------------
          
          Введение в семейство персональных компьютеров IBM PC
          
          Цель:  объяснить особенности технических средств микрокомпью
          тера и организации программного обеспечения.
          
          ВВЕДЕНИЕ
          ------------------------------------------------------------
          
             Написание  ассемблерных программ требует  знаний организа
          ции  всей  системы  компьютера.  В  основе  компьютера лежат
          понятия бита и байта.  Они являются тем средством, благодаря
          которым в компьютерной памяти представлены данные и команды.
             Программа в машинном коде состоит из  различных сигментов
          для определения данных,  для машинных команд и для сигмента,
          названного стеком, для хранения адресов. Для выполнения ариф
          метических действий,  пересылки данных и адресации компьютер
          имеет ряд регистров.  Данная глава содержит весь необходимый
          материал  по этим элэментам компьютера,  так  что вы сможете
          продвинутся к главе 2  к вашей первой программе  на машинном
          языке.
             
          БИТЫ И БАЙТЫ
          ------------------------------------------------------------
          
             Для  выполнения  программ  компьютер  временно записывает
          программу  и данные  в основную память.  Это память, которую
          люди имеют в виду, когда утверждают, что их компьютер имеет,
          например,  512К памяти. Компьютер имеет также ряд pегистров,
          которые он использует для временных вычислений.
             Минимальной  единицей  информации  в  компьютере является
          бит.  Бит  может быть  выключен,  так что  его значение есть
          нуль,   или  включен,  тогда  его  значение  равно  единице.
          Единственный бит не  может  представить  много  информации в
          отличие от группы битов.
             группа  из  девяти битов представляет собой  байт; восемь
          битов которого содержат данные и один бит -  контроль на чет
          ность.   Восемь  битов  обеспечивают   основу  для  двоичной
          арифметики и для представления символов,  таких  как буква A
          или символ  *.  Восемь  битов дают  256 различных комбинаций
          включенных  и  выключенных  состояний:  от  "все  выключены"
          (00000000) до "все включены" (11111111). Например, сочетание
          включенных  и выключенных битов  для  представления  буквы A
          выглядит как 01000001,  а  для cимвола  *  -   00101010 (это
          можно не запоминать).  Каждый байт в памяти компьютера имеет
          уникальный адрес, начиная с нуля.
             Требование контроля на  честность заключается в  том, что
          количество  включенных битов  а байте всегда  должно быть не
          четно. Контрольный бит для буквы A будет иметь значение еди-
          ница,  а  для символа *  -  ноль. Когда команда обращается к

          
          Ассемблер для IBM PC                                       2


          байту  в памяти,  компьютер проверяет этот байт.  Если число
          включенных  битов является четным,  система выдает сообщение
          об ошибке.  Ошибка четности  может  явится  результатом сбоя
          оборудования или случайным  явлением,  в  любом  случае, это
          бывает крайне редко.
             Может  появится  вопрос,  откуда  компьютер  "знает", что
          значения бит 01000001  представляют букву A. Когда на клавиа
          туре нажата  клавиша A,  система  принимает  сигнал  от этой
          конкретной клавиши в байт памяти.  Этот сигнал устанавливает
          биты в значения 01000001. Можно переслать этот байт в памяти
          и,  если  передать  его  на  экран  или  принтер,  то  будет
          сгенерирована буква A.
             По соглажению биты в байте пронумерованы от 0 до 7 справа
          налево, как это показано для буквы A:
             
                    Номера бит:         7 6 5 4 3 2 1 0
                    Значения бит:       0 1 0 0 0 0 0 1
             
             Число 2  в  десятой степени   равно 1024,  что составляет
          один килобайт и обозначается буквой К. Например, компьютер с
          памятью в 512К содержит 512 х 1024, т.е. 524288 байт.
             Процессор в PC  и в  совместимых  моделях  использует 16-
          битовую архитектуру,  поэтому он  имеет доступ  к 16-битовым
          значениям  как  в  памяти,  так  и  в  регистрах. 16-битовое
          (двухбайтовое)   поле  называется  словом.   Биты   в  слове
          пронумерованы от 0 до 15 справа налево, как это показано для
          букв PC:
             
               Номера бит:    15 14 13 12 11 10 9 8   7 6 5 4 3 2 1 0
               Значения бит:   0  1  0  1  0  0 0 0   0 1 0 0 0 0 1 1
             
          ASCII КОД
          ------------------------------------------------------------
          
             Для целей стандартизации в  микрокомпьютерах используется
          aмериканский национальный стандартный код для обмена информа
          цией ASCII (American National Standard Code  for Information
          Interchange).  Читается как "аски"  код (прим. переводчика).
          Именно  по  этой причине комбинация бит  01000001 обозначает
          букву A.  Наличие стандартного кода облегчает  обмен данными
          между   различными   устройствами    компьютера.   8-битовый
          рассширенный  ASCII-код,   используемый  в  PC  обеспечивает
          представление  256   символов,  включая  символы  для  нацио
          нальных алфавитов.  В приложении 1  приведен список символов
          ASCII кода,  а в главе 8  показано как вывести на экран боль
          шинство из 256 символов.
             
          ДВОИЧНЫЕ ЧИСЛА
          ------------------------------------------------------------
          




          
          Ассемблер для IBM PC                                       3


             Так как компьютер может различить только нулевое и единич
          ное состояние бита,  то  он  работает  системе  исчисления с
          базой 2  или в двоичной системе.  Фактически бит унаследовал
          cвое  название  от  английского  "BInary   digiT"  (двоичная
          цифра).
             Сочетанием двоичных цифр (битов)  можно представить любое
          значение.  Значение двоичного числа  определяется относитель
          ной позицией каждого  бита и наличием единичных  битов. Ниже
          показано восьмибитовое число содержащее все единичные биты:
             
               Позиционные веса:        128 64 32 16 8 4 2 1
               Включенные биты:           1  1  1  1 1 1 1 1
             
          Самый правый бит имеет весовое значение  1,  следующая цифра
          влево -  2,  следующая - 4 и т.д. Общая сумма для восьми еди
          ничных битов в данном случае составит 1 + 2 + 4 + ... + 128,
          или 255 (2 в восьмой степени - 1).
             Для двоичного числа 01000001  единичные биты представляют
          значения 1  и 64,  т.е.  65. Но  01000001 представляет также
          букву A!  Действительно,  здесь  момент,  который необходимо
          четко  уяснить.  Биты 01000001  могут представлять как число
          65, так и букву A:
             
             - если программа определяет элемент  данных для  арифмети
               ческих целей,  то 01000001  представляет двоичное число
               эквивалентное десятичному числу 65;
             
             - если программа определяет  элемент данных  (один или бо
               лее смежных  байт),  имея в виду описательный характер,
               как,  например,  заголовок, тогда 01000001 представляет
               собой букву или "строку".
             
             Пи програмировании это различие становится  понятным, так
          как назначение каждого элемента данных определено.
             Двоичное  число неограничено  только  восьмью битами. Так
          как процессор  8088  использует  16-битовую  архитектуру, oн
          автоматически оперирует с 16-битовыми числами.  2  в степени
          16  минус  1  дает  значение  65535,  а  немного творческого
          программирования позволит обрабатывать числа до 32  бит (2 в
          степени 32 минус 1 равно 4294967295) и даже больше.
             
             Двоичная арифметика
             
             Микрокомпьютер выполняет арифметические действия только в
          двоичном формате.  Поэтому программист  на  языке ассемблера
          должен быть знаком с двоичным форматом и двоичным сложением:
             
                              0 + 0 = 0
                              1 + 0 = 1
                              1 + 1 = 10
                          1 + 1 + 1 = 11
             


          
          Ассемблер для IBM PC                                       4


             Обратное внимание на перенос единичного бита  в последних
          двух операциях.  Теперь, давайте сложим 01000001 и 00101010.
          Букву A и символ *? Нет, число 65 и число 42:
             
                    Двоичные             Десятичные
             
                    01000001                  65
                    00101010                  42
                    01101011                 107
             
             Проверьте, что двоичная сумма 01101011 действительно
          равна 107. Рассмотрим другой пример:
             
                    Двоичные             Десятичные
             
                    00111100                  60
                    00110101                  53
                    01110001                 113
             
             
             Отрицательные числа
             
             Все представленные  выше двоичные числа  имеют положитель
          ные  значения,  что  обозначается  нулевым  значением самого
          левого  (старшего)  разряда.  Отрицательные  двоичные  числа
          содержат единичный бит в старшем разряде и  выражаются двоич
          ным  дополнением.  Т.е.,  для  представления  отрицательного
          двоичного   числа   необходимо  инвертировать   все  биты  и
          прибавить 1. Рассмотрим пример:
             
                    Число 65:           01000001
                    Инверсия:           10111110
                    Плюс 1:             10111111  (равно -65)
             
             Если прибавить единичные значения к числу 10111111, 65 не
          получится.  Фактически двоичное  число  считается отрицатель
          ным,  если его старший бит равен 1.  Для определения абсолют
          ного  значения  отрицательного  двоичного  числа, необходимо
          повторить  предыдущие  операции:  инвертировать  все  биты и
          прибавить 1:
             
                    Двоичное значение:  10111111
                    Инверсия:           01000000
                    Плюс 1:             01000001  (равно +65)
             
             Сумма +65 и -65 должна составить ноль:
             
                                        01000001  (+65)
                                        10111111  (-65)
                                     (1)00000000
             



          
          Ассемблер для IBM PC                                       5


             Все восемь бит имеют нулевое значение. Перенос единичного
          бита влево потерян.  Однако,  если  был  перенос  в знаковый
          pазряд  и из  разрядной  сетки,  то  результат  является кор
          ректным.
             Двоичное вычитание выполняется просто: инвентируется знак
          вычитаемого и складываются  два числа.  Вычтем, например, 42
          из 65.  Двоичное представление для 42  есть  00101010, и eго
          двоичное дополнение: - 11010110:
             
                              65        01000001
                           +(-42)       11010110
                              23     (i)00010111
             
             Результат 23 является корректным. В рассмотренном примере
          произошел перенос в знаковый разряд и из разрядной сетки.
             Если справедливость  двоичного дополнения  не сразу понят
          на,  рассмотрим следующие задачи:  Какое значение необходимо
          прибавить к двоичному числу 00000001,  чтобы  получить число
          00000000?  В терминах  десятичного исчисления  ответом будет
          -1. Для двоичного рассмотрим 11111111:
             
                                        00000001
                                        11111111
                         Результат:   (1)00000000
             
             Игнорируя перенос  (1),  можно видеть, что двоичное число
          11111111 эквивалентно десятичному -1 и соответственно:
             
                              0         00000000
                           -(+1)       -00000001
                             -1         11111111
             
             Можно видеть также каким образом  двоичными  числами пред
          cтавлены уменьшающиеся числа:
             
                              +3        00000011
                              +2        00000010
                              +i        00000001
                               0        00000000
                              -1        11111111
                              -2        11111110
                              -3        11111101
             
             Фактически нулевые биты  в  отрицательном  двоичном числе
          определяют его  величину:  рассмотрите  позиционные значения
          нулевых битов как если это были единичные  биты, сложите эти
          значения и прибавте единицу.
             Данный  материал  по двоичной арифметике  и отрицательным
          числам будет особенно полезен при изучении глав 12 и 13.
             
          ШЕСТНАДЦАТИРИЧНОЕ ПРЕДСТАВЛЕНИЕ
          ------------------------------------------------------------
          

          
          Ассемблер для IBM PC                                       6


             Представим,  что необходимо просмотреть содержимое некото
          pых  байт  в  памяти  (это  встретится  в  следующей главе).
          Требуется  oпределить  содержимое  четырех  последовательных
          байт (двух слов),  которые имеют двоичные значения.  Так как
          четыре  байта  включают  в  себя  32  бита,  то  специалисты
          разработали "стенографический"  метод представления двоичных
          данных. По этому методу каждый байт делится пополам и каждые
          полбайта  выражаются  соответствующим  значением. рассмотрим
          следующие четыре байта:
             
               Двоичное:   0101 1001 0011 0101 1011 1001 1100 1110
             Десятичное:     5    9    3    5   11    9   12   14
             
             Так как здесь для некоторых  чисел  требуется  две цифры,
          расширим  систему счисления  так,  чтобы  10=A,  11=B, 12=C,
          13=D,  14=E,  15=F.  таким образом получим более сокращенную
          форму, которая представляет содержимое вышеуказанных байт:
             
                              59  35  B9  CE
             
             Такая система счисления включает "цифры" от 0 до F, и так
          как таких цифр 16, она называется шестнадцатиричным представ
          лениeм.  В  таблице  1.1  приведены  двоичные,  десятичные и
          шестнадцатиричные значения чисел от 0 до 15.
             Шестнадцатиричный формат нашел большое применение в языке
          ассемблера.  В листингах ассемблирования программ в шестнад-
          цатеричном формате показаны все адреса, машинные коды команд
          и содержимое  констант.  Также для отладки при использовании
          программы  DOS DEBUG адреса  и содержимое  байтоа выдается в
          шестнадцатиричном формате.
             Если немного поработать с шестнадцатиричным  форматом, то
          можно быстро  привыкнуть  к нему.  рассмотрим несколько про-
          cтых примеров шестнадцатиричной арифметики. Следует помнить,
          что после шестнадцатиричного числа F  следует шестнадцатирич
          ное 10, что равно десятичному числу 16.
             
                         6   5   F   F   10   FF
                         4   8   1   F   10    1
                         A   D  10  1E   20  100
          
          ------------------------------------------------------------
          ------------------------------------------------------------
          Таблица 1.1. Двоичное, десятичное и шестнадцатиричное
                       представления.
          
             Заметьте также,  что шест.20 эквивалентно десятичному 32,
          шест.100 - десятичному 256 и шест.100 - десятичному 4096.
             В  данной  книге  шестнадцатиричные  числа  записываются,
          например,  как  шест.4B,  двоичные числа  как дв.01001011, и
          десятичные числа,  как 75  (отсутствие  какого-либо описания
          предполагает  десятичное число).  Исключения возможны, когда
          база  числа  очевидна  из  контекса.   Для  индикации  шест.
          числа в ассемблерной  программе непосредственно  после числа

          
          Ассемблер для IBM PC                                       7


          ставится символ "H", например, 25H (десятичное значение 37).
          Шест.  число всегда начинается с деcятичной цифры 0-9, таким
          образом, B8H записывается как 0B8H.
             В приложении  2  показано как преобразовывать шестнадцати
          pичные значения  в десятичные  и обратно.  Теперь расcмотрим
          некоторые  характеристики процессора PC,  которые необxодимо
          понять для перехода к главе 2.
             
          СЕГМЕНТЫ
          ------------------------------------------------------------
          
             Сегментом  называется область, которая начинается на гра-
          нице параграфа, т.е. по любому адресу, который делится на 16
          без остатка.  Хотя сегмент может располагаться в любом месте
          памяти  и иметь  размер  до  64  Кбайт,  он  требует столько
          памяти, cколько необходимо для выполнения программы. Имеется
          три главных сегмента:
             
          1.   Сегмент кодов. Сегмент кодов содержит машинные команды,
               которые  будут выполняться.  Обычно  первая выполняемая
               команда находится в начале  этого сегмента  и операцион
               ная система  передает управление по  адресу данного сег
               мента для выполнения программы.  Регистр сегмента кодов
               (CS) адресует данный сегмент.
          
          2.   Сегмент данных.  Сегмент  данных  содержит определенные
               данные,   константы  и   рабочие  области,  необходимые
               программе. Регистр сегмента данных (DS) адресует данный
               сегмент.
          
          3.   Сегмент  стека.  Стек содержит адреса  возврата как для
               программы  для возврата  в операционную  систему, так и
               для вызовов подпрограмм для возврата в  главную програм
               му.   Регистр  сегмента  стека   (SS)  адресует  данный
               сегмент.
          
             Еще  один  сегментный  регистр,  регистр  дополнительного
          сегмента  (ES), предназначен для специального использования.
          На  pис.1.2  графически представлены  регистры SS,  DS и CS.
          Последовательность  регистров и сегментов на  практике может
          быть иной. Три сегментных регистра содержат начальные адреса
          соответствующих сегментов  и  каждый  сегмент  начинается на
          границе параграфа.
             Внутри программы все адреса памяти относительны  к началу
          cегмента.   Такие  адреса  называются  смещением  от  начала
          сегмента.   Двухбайтовое  смещение  (16-бит)  может  быть  в
          пределах от шест.  0000 до шест. FFFF или от 0 до 65535. Для
          обращения к любому адресу в  программе, компьютер складывает
          адрес в регистре сегмента и смещение.  Например, первый байт
          в сегменте кодов имеет смещение  0,  второй байт -  01 и так
          далее до смещения 65535.



          
          Ассемблер для IBM PC                                       8


             В  качестве  примера  адресации,  допустим,  что  регистр
          сегмента  данных  содержит  шест.  045F и  некоторая команда
          обращается  к  ячейке  памяти  внутри   сегмента  данных  со
          смещением 0032.  Несмотpя на то, что регистр сегмента данных
          содержит 045F,  он указывает на адрес 045F0, т.е. на границе
          параграфа.   Действительный  aдрес   памяти   поэтому  будет
          следующий:
             
                         Адрес в DS:         045F0
                         Смещение:            0032
                         Реальный адрес:     04622
          
             Каким образом процессоры 8086/8088 адресуют память в один
          миллион  байт?  В регистре содержится 16  бит. Так как адрес
          сегмента  всегда  на границе параграфа,  младшие четыре бита
          адреса pавны нулю.  Шест. FFF0 позволяет адресовать до 65520
          (плюс смещение)  байт. Но специалисты решили, что нет смысла
          иметь  место для битов,  которые всегда  равны нулю. Поэтому
          адрес хранится  в cегментном  регистре  как  шест.  nnnn,  а
          компьютер полагает,  что имеются еще четыре  нулевых младших
          бита  (одна шест.  цифра),  т.е. шест. nnnn0. Таким образом,
          шест.  FFFF0  позволяет адресовать до 1048560  байт. Если вы
          сомневаeтесь,  то декодируйте каждое  шест.  F  как двоичное
          1111,  учтите нулевые биты и сложите  значения для единичных
          бит.
             Процессор 80286 использует 24 бита для адресации так, что
          FFFFF0   позволяет  адресовать  до  16   миллионов  байт,  а
          процессор 80386 может адресовать до четырех миллиардов байт.
             
          РЕГИСТРЫ
          ------------------------------------------------------------
          
             Процессоры  8086/8088  имеют  14  регистров, используемых
          для  yправления  выполняющейся   программой,  для  адресации
          памяти и для обеспечения  арифметических  вычислений. Каждый
          регистр имеет длину в одно  слово (16  бит)  и адресуется по
          имени. Биты регистра принято нумеровать слева направо:
             
                    15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
             
             Процессоры 80286  и 80386 имеют ряд дополнительных регист
          ров,  некоторые  из  них 16-битовые.  Эти  регистры здесь не
          рассматриваются.
             
             Сегментные регистры CS, DS, SS и ES
             
             Каждый  сегментный  регистр  обеспечивает  адресацию  64К
          памяти,  которая называется текущим сегментом.  Как показано
          ранее,  cегмент выравнен на границу параграфа и  его адрес в
          сегментном  pегистре  предполагает  наличие  справа  четырех
          нулевых битов.



          
          Ассемблер для IBM PC                                       9


          1. Регистр  CS.  Регистр  сегмента  кода  содержит начальный
             адрес сегмента кода.  Этот адрес плюс величина смещения в
             командном  указателе   (IP)   определяет  адрес  команды,
             которая должна  быть выбрана для  выполнения. Для обычных
             программ нет необходимости делать ссылки на регистр CS.
          2. Регистр DS. Регистр  сегмента данных  содержит  начальный
             адрес сегмента данных. Этот адрес плюс величина смещения,
             определенная  в команде,  указывают на  конкретную ячейку
             в сегменте данных.
          3. Регистр SS. Регистр  сегмента  стека  содержит  начальный
             адрес в сегменте стека.
          4. Регистр ES. Некоторые  операции  над строками  используют
             дополнительный  сегментный регистр  для управления адреса
             цией памяти.  В данном контексте регистр ES  связан  с ин
             дексным регистром  DI.  Если  необходимо  использовать ре
             гистр ES,  ассемблерная программа должна его инициализиро
             вать.
          
             Регистры общего назначения: AX, BX, CX и DX
             
             При  программировании  на   ассемблере   регистры  общего
          назначения  являются "рабочими  лошадками". Особенность этих
          регистров  состоит в  том,  что  возможна  адресация  их как
          одного целого слова или как oднобайтовой  части.  Левый байт
          является старшей частью  (high),  a правый -  младшей частью
          (low).  Например,  двухбайтовый регистр CX  состоит  из двух
          однобайтовых:  CH  и CL,  и  ссылки  на  регистр возможны по
          любому из этих трех имен. Следующие три ассемблерные команды
          засылают нули в регистры CX, CH и CL, соответственно:
             
                              MOV  CX,00
                              MOV  CH,00
                              MOV  CL,00
             
          1. Регистр AX. Регистр AX  является  основным  сумматором  и
             применяется  для  всех  операций  ввода-вывода, некоторых
             операций  над строками  и некоторых  арифметических опера
             ций.   Например,  команды  умножения,  деления  и  сдвига
             предполагают использование регистра AX. Некоторые команды
             генерируют более эффективный код,  если  они имеют ссылки
             на регистр AX.
          
                              AX: │ AH │ AL │
          
          2. Регистр BX. Регистр  BX  является базовым регистром.  Это
             единственный  регистр  общего  назначения,  который может
             использоваться в качестве "индекса"  для расширенной адре
             сации. Другое общее применение его - вычисления.
          
                              BX: │ BH │ BL │
          



          
          Ассемблер для IBM PC                                      10


          3. Регистр CX. Регистр CX является счетчиком.  Он  необходим
             для  управления  числом повторений циклов  и для операций
             сдвига влево или вправо.  Регистр  CX  используется также
             для вычислений.
          
                              CX: │ CH │ CL │
          
          4. Регистр DX. Регистр DX  является   регистром  данных.  Он
             применяется  для некоторых  операций  ввода/вывода  и тех
             операций умножения и деления над  большими  числами, кото
             рые используют регистровую пару DX и AX.
          
                              DX: │ DH │ DL │
          
             Любые регистры общего назначения могут использоваться для
          cложения и вычитания как 8-ми, так и 16-ти битовых значений.
             
             Регистровые указатели: SP и BP
             
             Регистровые указатели SP и BP обеспечивают системе доступ
          к  данным  в  сегменте  стека.  Реже  они  используются  для
          операций сложения и вычитания.
             
          1. Регистр SP.  Указатель стека  обеспечивает  использование
             стека в памяти,  позволяет временно хранить адреса и иног
             да данные.  Этот регистр связан с регистром SS для адреса
             ции стека.
          
          2. Регистр BP. Указатель базы облегчает доступ к параметрам:
             данным и адресам переданным через стек.
          
             Индексные регистры: SI и DI
             
             Оба индексных регистра возможны для расширенной адресации
          и для использования в операциях сложения и вычитания.
             
          1. Регистр SI. Этот регистр является  индексом  источника  и
             применяется для некоторых операций над строками. В данном
             контексте регистр SI связан с регистром DS.
          
          2. Регистр DI. Этот регистр является  индексом назначения  и
             применяется  также  для  строковых  операций.   В  данном
             контексте регистр DI связан с регистром ES.
          
             Регистр командного указателя: IP
             
             Регистр IP  содержит смещение на  команду, которая должна
          быть выполнена.  Обычно этот регистр в программе не использу
          ется,  но он может изменять свое  значение при использовании
          отладчика DOS DEBUG для тестирования программы.
             
             Флаговый регистр
             

          
          Ассемблер для IBM PC                                      11


             Девять из 16  битов флагового регистра являются активными
          и определяют текущее состояние машины и  результатов выполне
          ния.  Многие  арифметические  команды  и  команды  сравнения
          изменяют состояние флагов. Назначение флаговых битов:
             
                    Флаг                Назначение
             
          O (Переполнение)          Указывает на переполнение старшего
                                    бита при арифметических командах.
          D (Направление)           Обозначает левое или правое направ
                                    ление пересылки или сравнения
                                    строковых данных (данных в памяти
                                    превышающих длину одного слова).
          I (Прерывание)            Указывает на возможность внешних
                                    прерываний.
          T (Пошаговый режим)       Обеспечивает возможность работы
                                    процессора в пошаговом режиме. На
                                    пример, программа DOS DEBUG уста
                                    навливает данный флаг так, что воз
                                    можно пошаговое выполнение каждой
                                    команды для проверки изменения
                                    содержимого регистров и памяти.
          S (Знак)                  Содержит результирующий знак после
                                    арифметических операций (0 - плюс,
                                    1 - минус).
          Z (Ноль)                  Показывает результат арифметичес
                                    ких операций и операций сравнения
                                    (0 - ненулевой, 1 - нулевой
                                    результат).
          A (Внешний перенос)       Содержит перенос из 3-го бита для
                                    8-битных данных, используется для
                                    специальных арифметических
                                    операций.
          P (Контроль четности)     Показывает четность младших
                                    8-битовых данных (1 - четное и 0 -
                                    нечетное число).
          C (Перенос)               Содержит перенос из старшего бита,
                                    после арифметических операций, а
                                    также последний бит при сдвигах
                                    или циклических сдвигах.
          
             При программировании на ассемблере  наиболее часто исполь
          зуются флаги O,  S,  Z,  и  C  для арифметических операций и
          операций сравнения,  а флаг D для обозначения  направления в
          операциях  над  строками.  В  последующих  главах содержится
          более подробная информация о флаговом pегистре.
             
          АРХИТЕКТУРА PC
          ------------------------------------------------------------
          
             Основными элементами аппаратных средств компьютера являют
          ся:  cистемный  блок,  клавиатура,  устройство  отображения,
          дисководы,   печатающее  устройство  (принтер)  и  различные

          
          Ассемблер для IBM PC                                      12


          средства для асинхронной коммуникации  и управления игровыми
          программами.  Системный  блок  состоит  из  системной платы,
          блока   питания   и  ячейки  расширения  для  дополнительных
          плат. На системной плате размещены:
             
          - микропроцессор (Intel);
          - постоянная память (ROM 40Кбайт);
          - оперативная память (RAM до 512К в зависимости от модели);
          - расширенная версия бейсик-интерпретатора.
          
             Ячейки  расширения   обеспечивают  подключение  устройств
          отображения,  дисководов для гибких дисков (дискет), каналов
          телекоммуникаций, дополнительной памяти и игровых устройств.
             Клавиатура содержит  собственный  микропроцессор, который
          oбеспечивает тестирование при включении памяти, сканирование
          клавиатуры,  подавление "дребезга" клавишей и буферизацию до
          20 символов.
             "Мозгом"   компьютера  является  микропроцессор,  который
          выполняет  обработку всех  команд  и данных.  Процессор 8088
          использует  16-битовые регистры,  которые могут обрабатывать
          два байта oдновременно.  Процессор 8088  похож на 8086, но с
          одним  различием:  8088  ограничен  8-битовыми  (вместо  16-
          битовых)  шинами, которые обеспечивают передачу данных между
          процессором,  памятью и внешними устройствами.  Это ограниче
          ние соотносит стоимость передачи данных и выигрыш в простоте
          аппаратной  реализации.  Процессоры 80286  и  80386 являются
          расширенными версиями процессора 8086.
             Как показано на рис. 1.3 процессор разделен на две части:
          oперационное устройство  (ОУ)  и шинный интерфейс (ШИ). Роль
          ОУ  заключается в  выполнение  команд,  в  то  время  как ШИ
          подготавливает команды и данные для выполнения. Операционное
          устройство cодержит арифметико-логическое  устройство (АЛУ),
          устройство  yправления  (УУ)  и десять регистров. Эти устрой
          ства обеспечивают выполнение  команд, арифметические вычисле
          ния и логические  oперации (сравнение на  больше, меньше или
          равно).
             Три элемента  шинного  интерфейса:  устройство управления
          шиной, очередь команд и сегментные регистры осуществляют три
          важные функции:  во-первых, ШИ управляет передачей данных на
          операционное  устройство,  в память и на  внешнее устройство
          ввода/вывода.  Во-вторых, четыре сегментных регистра управля
          ют адресацией памяти объемом до 1 Мбайта.
             Третья функция ШИ это выборка команд. Так все программные
          команды находятся в памяти, ШИ должен иметь доступ к ним для
          выборки их в очередь команд.  Так как очередь имеет размер 4
          или более  байт,  в  зависимости  от  процессора,  ШИ должен
          "заглядывать вперед"  и  выбирать команды  так, чтобы всегда
          существовала непустая очередь команд готовых для выполнения.
             Операционное устройство и шинный интерфейс работают парал
          лельно,  причем ШИ  опережает ОУ  на  один шаг. Операционное
          устройcтво  сообщает  шинному  интерфейсу   о  необходимости
          доступа к данным  в памяти  или на  устройство ввода/вывода.
          Кроме  того  ОУ  запрашивает  машинные  команды  из  очереди

          
          Ассемблер для IBM PC                                      13


          команд. Пока ОУ занято выполнением первой в очереди команды,
          ШИ  выбирает  следующую  команду  из  памяти.   Эта  выборка
          происходит  во  время  выполнения,   что  повышает  cкорость
          обработки.
             
             Память
             
             Обычно  микрокомпьютер имеет два  типа внутренней памяти.
          первый тип это постоянная  память  (ПЗУ)  или ROM (read-only
          memory).  ROM представляет собой специальную  микросхему, из
          котоpой (как  это следует из  названия)  возможно только чте
          ние.  Поскольку данные в ROM  специальным образом "прожигают
          ся" они не могут быть модифицированы.
             Основным  назначением  ROM  является  поддержка  процедур
          начальной  загрузки:  при  включении питания  компьютера ROM
          выполняет  pазличные  проверки  и  загружает  в  оперативную
          память (RAM)  данные из  системной дискеты  (например, DOS).
          Для целей  программирования  наиболее  важным  элементом ROM
          является BIOS  (Basic  Input/Output  System) базовая система
          ввода/вывода,  которая  рассматривается в  следующих главах.
          (Basic -  здесь обычное слово,  а не язык программирования).
          ROM  кроме того  поддерживает  интерпретатор языка  бейсик и
          формы для графических символов.
             Память,  с которой имеет  дело  программист, представляет
          собой RAM (Random  Access Memory)  или ОЗУ, т.е. оперативная
          памяти,  доступная  как для чтения,  так  и для  записи. RAM
          можно  рассматривать  как  рабочую  область  для  временного
          хранения программ и данных на время выполнения.
             Так  как содержимое  RAM теряется  при отключении питания
          компьютера,   необходима  внешняя   память   для  сохранения
          программ и данных.  Если установлена дискета  с операционной
          системой или имеeтся жесткий  диск  типа  винчестер,  то при
          включении  питания  ROM  загружает  программы  DOS   в  RAM.
          (Загружается  только основная часть DOS,  а не  полный набор
          программ DOS).  Затем необходимо oтветить на приглашение DOS
          для  установки  даты   и  можно  вводить   запросы  DOS  для
          выполнения  конкретных  действий.  Одним  из  таких действий
          может быть загрузка программ с диска в RAM. Поскольку DOS не
          занимает всю память,  то в ней  имеется  (обычно)  место для
          пользовательских   программ.    Пользовательская   программа
          выполняется в RAM  и  обычно  осуществляет  вывод  на экран,
          принтер  или  диск.  По  окончании  можно  загрузить  другую
          программу в RAM.  Ппредыдущая программа хранится  на диске и
          новая  программа при  загрузке  может  наложиться (затереть)
          предыдущую программу в RAM.
             
             Выделение  памяти.  Так как любой сегмент  имеет объем до
          64К  и имеется четыре  типа  сегментов,  то это предполагает
          общее количество доступной   RAM памяти:  4 х 64К = 256К. Но
          возможно любое количество сегментов.  Для того, чтобы адресо
          вать другой  cегмент,  необходимо всего  лишь изменить адрес
          сегментного регистра.


          
          Ассемблер для IBM PC                                      14


             RAM включает в себя первые три четверти  памяти,  а ROM -
          последнюю  четверть.  В  соответствии  с  картой  физической
          памяти  микрокомпьютера,  приведенной  на  рис.  1.4, первые
          256К RAM памяти находятся на  системной плате.  Так как одна
          область  в RAM зарезервирована для  видеобуфера,  то имеется
          640К  доступных для использования программистом,  по крайней
          мере в текущих версиях DOS.  ROM начинается по адресу 768К и
          oбеспечивает  поддержку   операций  ввода/вывода   на  такие
          устройcтва как контролер жесткого  диска.  ROM, начинающийся
          по  адреcу  960К  управляет  базовыми  функциями компьютера,
          такими  как  тест  при  включении  питания,  точечные образы
          графических символов и автозагрузчик с дискет.
             Все дальнейшие упоминания  RAM используют  общий термин -
          память.
             
             Адресация.  Все ячейки памяти пронумерованы последователь
          но от 00  - минимального адреса памяти. Процессор обеспечива
          ет доступ к байтам или словам  в памяти.  Рассмотрим десятич
          ное  число 1025.  Для  записи  в память  шест. представления
          этого числа -  0401  требуется два байта или одно слово. Оно
          состоит из cтаршей части -  04 и младшей части - 01. Система
          хранит в памяти  байты слова в  обратной последовательности:
          младшая  часть по меньшему адресу,  а старшая  - по большему
          адресу.  Предположим,  что процессор записал  шест. 0401  из
          регистра в ячейки памяти 5612 и 5613, следующим образом:
             
                                   │01│04│
                                    │   │
                          ячейка 5612,  ячейка 5613
                          младший байт  старший байт
             
             Процессор полагает,  что  байты числовых  данных в памяти
          представлены  в обратной  последовательности  и обрабатывает
          их  соответственно.   Несмотря  на  то,   что  это  свойство
          полностью  aвтоматизировано,  следует всегда помнить об этом
          факте при программировании и отладке ассемблерных программ.
             
          ОСНОВНЫЕ ПОЛОЖЕНИЯ НА ПАМЯТЬ
          ------------------------------------------------------------
          
          -  Единицей  памяти  является  байт,   состоящий  из  восьми
             информационных  и одного контрольного битов.  Два смежных
             байта образуют слово.
          -  Сердцем компьютера является микропроцессор, который имеет
             доступ к байтам или словам в памяти.
          -  ASCII код есть формат представлением символьных данных.
          -  Компьютер способен  различать биты,  имеющие разное значе
             ние:  0 или 1, и выполнять арифметические операции только
             в двоичном формате.
          -  Значение двоичного числа  определено расположением единич
             ных битов.  Так, двоичное 1111 равно 2**3 + 2**2 + 2**1 +
             2**0, или 15.


          
          Ассемблер для IBM PC                                      15


          -  Отрицательные числа представляются  двоичным дополнением:
             обратные значения бит положительного  представления числа
             +1.
          -  Сокращенная  запись  групп из  четыре  битов представляет
             собой  шестнадцатиричный формат.  Шест.  цифры 0-9  и A-F
             представляют двоичные числа от 0000 до 1111.
          -  Программы состоят  из сегментов:  сегмент стека для хране
             ния  адресов  возврата,  сегмент  данных  для определения
             данных и рабочих областей и сегмент кода  для выполняемых
             команд.  Все  адреса в программе  представлены как относи
             тельные смещения от начала сегмента.
          -  Регистры управляют выполнением команд, адресацией, арифме
             тическими операциями и состоянием выполнения.
          -  ROM (ПЗУ) и RAM (ОЗУ) представляют собой два типа внутрен
             ней памяти.
          -  Процессор  хранит двухбайтовые числовые  данные (слова) в
             памяти в обратной последовательности.
          
          ВОПРОСЫ ДЛЯ САМОПРОВЕРКИ
          ------------------------------------------------------------
          1.1.  Напишите битовые представления ASCII кодов  для следую
                щих однобитовых символов.  (Используйте приложение 1 в
                качестве справочника): а) P, б) p, в) #, г) 5.
          1.2.  Напишите битовые представления для следующих чисел: а)
                5, б) 13, в) 21, г) 27.
          1.3.  Cложите следующие двоичные:
          
                         а) 00010101    б) 00111110    в) 00011111
                            00001101       00101001       00000001
          
          1.4.  Определите двоичные дополнения  для следующих двоичных
                чисел: а) 00010011, б) 00111100, в) 00111001.
          1.5.  Определите положительные значения для следующих отрица
                тельных двоичных чисел:  а)  11001000, б) 10111101, в)
                10000000.
          1.6.  Определите шест. представления для а) ASCII символа Q,
                б)  ASCII  числа 7,  в)  двоичного числа  01011101, г)
                двоичного  01110111.
          1.7.  Сложите следующие шест. числа:
          
                         а) 23A6   б) 51FD   в) 7779   г) EABE
                            0022         3       887      26C4
          
          1.8.  Определите  шест.  представления для следующих десятич
                ных чисел.  Метод преобразования приведен в приложении
                2.  Проверте также полученные результаты, преобразовав
                шест.  значения в двоичные и сложив единичные биты. а)
                19,  б) 33, в) 89, г) 255, д) 4095, е) 63398.
          1.9.  Что представляют  собой три типа  сегментов, каковы их
                максимальные размеры и адреса,  с которых они начинают
                ся.



          
          Ассемблер для IBM PC                                      16


          1.10. Какие регистры можно использовать для следующих целей:
                а)  сложение и вычитание,  б) подсчет числа циклов, в)
                умножение и деление,  г)  адресация сегментов, д) инди
                кация нулевого  результата,  е)  адресация выполняемой
                команды?
          1.11. Что представляют собой два основных типа памяти компью
                тера и каково их основное назначение?















































          
