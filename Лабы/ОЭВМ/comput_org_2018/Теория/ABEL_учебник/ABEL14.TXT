          Ассемблер для IBM PC. Глава 14                            24


          
          ГЛАВА 14
          ------------------------------------------------------------
          
          Обработка таблиц
          
          Цель:  Раскрыть требования для  определения таблиц, организа
          ции поиска в таблицах и сортировки элементов таблицы.
          
          ВВЕДЕНИЕ
          ------------------------------------------------------------
             
             Многие   программные   применения   используют  табличную
          организацию  таких  данных,  как  имена,  описания, размеры,
          цены.  Определение  и  использование  таблиц  включает  одну
          новую команду ассемблера  -  XLAT. Таким образом, использова
          ние таблиц  -  это  лишь  дело техники  и применения знаний,
          полученных из предыдущих глав.
             Данная    глава    начинается    определением   некоторых
          общепринятых таблиц. Организация поиска в таблице зависит от
          способа ее определения. Существует много различных вариантов
          определения таблиц и алгоритмов поиска.
          
          ОПРЕДЕЛЕНИЕ ТАБЛИЦ
          ------------------------------------------------------------
             
             Для  облегчения  табличного   поиска  большинство  таблиц
          определяются систематично, т.е. элементы таблицы имеют одина
          ковый формат (символьный или числовой),  одинаковую  длину и
          восходящую или нисходящую последовательность элементов.
             Таблица,  которой  уже приходилось пользоваться  в данной
          книге  -  это  стек,  представляющий собой  таблицу  из 64-х
          неинициализированных слов:
             
                         STACK     DW   64 DUP(?)
             
             Следующие  две  таблицы  инициализированы  символьными  и
          числовыми значениями:
             
                    MONTAB    DB   'JAN','FEB','MAR', ... ,'DEC'
                    COSTAB    DB   205,208,209,212,215,224,...
             
          Таблица MONTAB определяет алфавитные аббревиатуры месяцев, а
          COSTAB -  определяет таблицу номеров служащих. Таблица может
          также  содепжать  смешанные  данные  (регулярно чередующиеся
          числовые  и  символьные  поля).  В  следующей ассортиментной
          таблице  каждый  числовой элемент  (инвентарный номер) имеет
          две   цифры   (один  байт),   а  каждый  символьный  элемент
          (наименование)  имеет  девять  байтов.  Точки,  показанные в
          наименовании "Paper"  дополняют длину этого поля  до 9 байт.
          Точки   показывают,   что  недостающее  пространство  должно
          присутствовать. Вводить точки необязательно.
          

          
          Ассемблер для IBM PC. Глава 14                            25


               STOKTBL DB 12,'Computers',14,'Paper....',17,'Diskettes'
          
          Для ясности можно закодировать элементы таблицы вертикально:
          
                    STOKTBL   DB   12,  'Computers'
                              DB   14,  'Paper....'
                              DB   17,  'Diskettes'
             
             Рассмотрим теперь различные способы  использования таблиц
          в программах.
          
          ПРЯМОЙ ТАБЛИЧНЫЙ ДОСТУП
          ------------------------------------------------------------
          
             Предположим,  что пользователь  ввел номер месяца -  03 и
          программа  должна  преобразовать  этот  номер  в  алфавитное
          значение March.  Программа для выполнения такого преобразова
          ния   включает  определение   таблицы   алфавитных  названий
          месяцев,  имеющих  одинаковую  длину.  Так как самое длинное
          название - September, то таблица имеет следующий вид:
             
                         MONTBL    DB   'January..'
                                   DB   'February.'
                                   DB   'March....'
             
          Каждый элемент таблицы имеет длину  9  байт.  Адрес элемента
          'January'  -  MONTBL+0,  'February'  -  MONTBL+9,  'March' -
          MONTBL+18.  Для  локализации  месяца  03,  программа  должна
          выполнить следующее:
          
          1.   Преобразовать введенный  номер  месяца  из  ASCII  33 в
               двоичное 03.
          2.   Вычесть единицу из номера месяца:   03 - 1 = 02
          3.   Умножить результат на длину элемента (9):   02 х 9 = 18
          4.   Прибавить   произведение  (18)   к  адресу   MONTBL;  в
               результате получится адрес требуемого  названия месяца:
               MONTBL+18.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
                    Рис. 14.1. Прямая табличная адресация.
             
             На рис.14.1  приведен  пример  прямого доступа  к таблице
          названий месяцев.  Для  краткости  в  программе используются
          вместо девятисимвольных названий - трехсимвольные. Введенный
          номер  месяца  определен  в  поле  MONIN.  Предположим,  что
          некоторая  подпрограмма  формирует  запрос  на  ввод  номера
          месяца в ASCII-формате в поле MONIN.
             Описанная  техника работы  с  таблицей  называется прямым
          табличным доступом.  Поскольку данный алглритм непосредствен
          но вычисляет адpес необходимого  элемента  в  таблице,  то в
          программе не требуется выполнять операции поиска.


          
          Ассемблер для IBM PC. Глава 14                            26


             Хотя  прямая  табличная адресация  очень  эффективна, она
          возможна  только  при последовательной  организации. То есть
          можно    использовать    такие   таблицы,    если   элементы
          располагаются в регулярной  последовательности:  1, 2, 3,...
          или 106,  107, 108,... или даже 5, 10, 15. Однако, не всегда
          таблицы  построены   таким  образом.   В  следующем  разделе
          рассматриваются таблицы, имеющие нерегулярную организацию.
          
          ТАБЛИЧНЫЙ ПОИСК
          ------------------------------------------------------------
          
             Некоторые таблицы состоят из  чисел,  не  имеющих видимой
          закономерности.  Характерный  пример  -  таблица инвентарных
          номеров  с последовательными номерами,  например,  134, 138,
          141,  239 и 245. Другой тип таблиц состоит из распределенных
          по ранжиру величин,  таких как подоходный налог. В следующих
          разделах рассмотрим эти типы таблиц и организацию табличного
          поиска.
             
             Таблицы с уникальными элементами
             
             Инвентарные  номера  большинства  фирм   часто  не  имеют
          последовательного порядка.  Номера,  обычно, группируются по
          категориям,  первые  цифры указывают на  мебель или приборы,
          или  номер  отдела.  Кроме  того  время  от  времени  номера
          удаляются, а новые добавляются. В таблице необходимо связать
          инвентарные номера  и их  конкретные  наименования  (и, если
          требуется,   включить  стоимость).   Инвернтарные  номера  и
          наименования  могут быть  определены  в  различных таблицах,
          например:
             
               STOKNOS DB '101','107','109',...
               STOKDCR DB 'Excavators','Processors','Assemblers',...
          
          или в одной таблице, например:
          
                    STOKTAB   DB   '101','Excavators'
                              DB   '107','Processors'
                              DB   '109','Assemblers'
                              ...
             
             Программа  на  рис.14.2  определяет инвентарную таблицу и
          выполняет  табличный  поиск.   Таблица  содержит  шесть  пар
          номеров и наименований.  Цикл поиска начмнается со сравнения
          введенного  инвентарного  номера  в  поле  STOKNIN  с первым
          номером в таблице. Если номера различные, то адрес в таблице
          увеличивается   для   сравнения   со  следующим  инвентарным
          номером.  Если  номера  равны,  то  программа (A30) выделяет
          наименование из таблицы и записывает его в поле DESCRN.
             Поиск выполняет максимум шесть сравнений и если требуемый
          номер  в  таблице  отсутствует,  то  происходит  переход  на
          программу   обработки  ошибки,   которая  выводит  на  экран
          соответствующее сообщение.

          
          Ассемблер для IBM PC. Глава 14                            27


             Обратите   внимание,   что  в  начале  программы  имеется
          команда,   которая  пересылает  содержимое  поля  STOKNIN  в
          регистр AX.  Хотя STOKNIN определенно как  3233, команда MOV
          загрузит в регистр AX это значение в  обратной последователь
          ности  байтов  3332.  Так как элементы таблицы  имеют прямую
          последовательность  байтов,  то  после  команды  MOV имеется
          команда  XCHG,  которая меняет местами байты в  регистре AX,
          возвращая им  прямую последовательность,  т.е. 3233. Команда
          CMP,  предполагая  обратную  последовательность,  сравнивает
          сначала  правые  байты,  а  затем  -  левые.  Следовательно,
          проверка на  pавенство  будет   корректной,  но  проверки на
          больше  или   меньше  дадут   неправильные  результаты.  Для
          сравнения  на  больше  или меньше  следует  опустить команду
          XCHG,  переслать  элемент таблицы  командой  MOV,  скажем, в
          регистр  BX  и затем сравнить  содержимое регистров  AX и BX
          следующим образом:
             
                              MOV  AX,STOKNIN
                              LEA  SI,STOKTAB
                         C20:
                              MOV  BX,[SI]
                              CMP  AX,BX
                              JA или JB ...
             
             В программе такого  типа другая таблица  может определять
          стоимость  единицы  товара.   Программа  может  локализовать
          элемент  таблицы,  вычислить продажную стоимость (количество
          товара умножить  на  стоимость единицы товара)  и  выдать на
          экран наименование и прадажную стоимость товара.
             В  примере на  рис.  14.2   таблица содержит двухбайтовые
          номера и десятибайтовые  наименования. Детальное программиро
          вание  будет  oтличаться  для   различного  числа   и  длины
          элементов.  Например, для сравнения трехбайтовых полей можно
          использовать  команду REPE  CMPSB,  хотя  эта  команда также
          включает использование pегистра CX.
             
             Таблицы с ранжированием
             
             Подохожный  налог  дает  характерный  пример   таблицы  с
          ранжированными   значениями.    Представим   себе   таблицу,
          содержащую  размеры  доходов  oблагаемых  налогами,  процент
          налога и поправочный коэффициент:
             
               Размер дохода    Процент налога    Поправочный к-нт
             
                    0-1000.00           10               0,00
              1000,01-2500,00           15             050,00
              2500,01-4250,00           18             125,00
              4250,01-6000,00           20             260,00
              6000,01 и более           23             390,00
             



          
          Ассемблер для IBM PC. Глава 14                            28


          В налоговой  таблице процент увеличивается в  соответствии с
          увеличением  налогооблагаемого   дохода.   Элементы  таблицы
          доходов содержат максимальные величины для каждого шага:
          
                    TAXTBL    DD   100000,250000,425000,600000,999999
          
          для организации поиска в такой таблице, программа сравнивает
          доxод налогоплатильщика с табличным значением дохода:
          
          если меньше или равно,
               то использовать соответствующий процент и поправку;
          если больше, то перейти к следующему элементу таблицы.
          
          Величина налога рассчитывается по формуле:
          
               Доход  х  Процент налога : 100 - поправочный к-нт
          
             Табличный поиск с использованием сравнения строк
             
             Если элемент таблицы превышает длину в два байта,  то для
          операции сравнения  можно  использовать  команду  REPE CMPS.
          Предположим,  что  таблица  инвентарных  номеров  (рис.14.2)
          переделана для трехбайтовых  номеров.  Если STOKNIN является
          первым полем  в области данных,  а STOKTAB -  вторым, то они
          могут выглядеть cледующим образом:
             
          Данные: │123│035Excavators│038Lifters   │049Presses   │ ...
                   │   │  │          │  │          │  │
          Адрес:  00  03 06         16 19         29 32
          
          Программа  на  рис.14.3  определяет таблицу STOKTAB, включая
          последний элемент  '999'  для  индикации  конца  таблицы при
          поиске.   Программа  поиска  сравнивает  содержимое  каждого
          элемента таблицы с содержимым поля STOKNIN:
          
          Элемент таблицы     STOKNIN   Результат сравнения
          
               035            123       Меньше: проверить след.эл-т
               038            123       Меньше: проверить след.эл-т
               049            123       Меньше: проверить след.эл-т
               102            123       Меньше: проверить след.эл-т
               123            123       Равно: элемент найден
             
             Заметим, что команда CMPSB на рис.14.3 сравнивает байт за
          байтом,  пока байты не будут равны и автоматически увеличива
          ет регистpы SI и DI.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
             Рис.14.3. Табличный поиск с использованием команды CMPSB
          



          
          Ассемблер для IBM PC. Глава 14                            29


             Регистр  CX  инициализируется  значением 03,  а начальные
          относительные  адреса  в регистрах SI  и  DI устанавливаются
          равными 03 и 00 соответственно. Сравнение с первым элементом
          таблицы (035:123)  завершается на первом байте,  после этого
          регистр SI  содержит  04,  DI:  01,  CX:  02. Для следующего
          сравнения  регистр SI  должен  иметь значение 16,  а DI: 00.
          Корректировка регистра  DI  сводится  к простой перезагрузке
          адреса  STOKNIN.   Увеличение   адреса  следующего  элемента
          таблицы, который должен быть в регистре SI, зависит от того,
          на  каком байте  (первом,  втором  или  третьем) закончилось
          предыдущее сравнение.  Регистр CX  содержит  число  байт, не
          участвующих в сравнении,  в данном  случае -  02. Прибавив к
          содержимому  регистра  SI  значение  в регистре  CX  и длину
          наименования,   получим   относительный   адрес   следующего
          элемента:
             
                    Адрес в SI после CMPSB             04
                    Прибавить CX                       02
                    Прибавить длину наименования       10
                    Относительный адрес след.элемента  16
             
             Так  как  регистр  CX  всегда  содержит  число  байт,  не
          участвующих  в  сравнении  (если  такие   есть),  то  расчет
          справедлив для всех случаев:  прекращение сравнения после 1,
          2  или 3  байта.  Если сравниваются  одинаковые элементы, то
          регистр CX получит значение 00, а адрес в pегистре SI укажет
          на требуемое наименование.
             
             Таблицы с элементами переменной длины
             
             Существуют  таблицы,  в которых элементы имеют переменную
          длину.   Каждый  элемент  такой  таблицы  может  завершаться
          специальным символом ограничителем, например, шест.00; конец
          таблицы  можно  обозначить  огpаничителем  шест.FF.  В  этом
          случае  необходимо  гарантировать,  чтобы  внутри  элементов
          таблицы не встречались указанные  ограничители. Помните, что
          двоичные  числа могут выражаться  любыми битовыми комбинация
          ми. Для поиска можно использовать команду SCAS.
             
          ТРАНСЛИРУЮЩАЯ КОМАНДА XLAT
          ------------------------------------------------------------
             
             Команда XLAT транслирует содержимое одного байта в другое
          предопределенное  значение.  С  помощью  команды  XLAT можно
          проверить  корректность  содержимого  элементов  данных. При
          передаче  данных  между персональным  компьютером  и  ЕС ЭВМ
          (IBM)  с помощью  команды XLAT можно выполнить перекодировку
          данных между форматами ASCII и EBCDIC.
             В следующем примере происходит  преобразование  цифр от 0
          до 9  из кода ASCII в код EBCDIC. Так как представление цифр
          в ASCII выглядит как шест.30-39, а в EBCDIC - шест.F0-F9, то
          замену  можно выполнить командой  OR.  Однако, дополнительно
          преобразуем все остальные коды  ASCII в  пробел  (шест.40) в

          
          Ассемблер для IBM PC. Глава 14                            30


          коде   EBCDIC.   Для  команды  XLAT   необходимо  определить
          таблицу перекодировки,  которая учитывает все  256 возможных
          символов, с кодами EBCDIC в  ASCII позициях:
             
             XLTBL  DB   47 DUP(40H)    ;Пробелы в коде EBCDIC
                    DB   0F0H,0F1H,0F2H,0F3H,...,0F9H  ;0-9 (EBCDIC)
                    DB   199 DUP(40H)   ;Пробелы в коде EBCDIC
             
          Команда  XLAT  предполагает  адрес таблицы в регистре  BX, а
          транслируемый байт  (например,  поля  ASCNO)  в регистре AL.
          Следующие команды выполняют подготовку и трансляцию байта:
          
                              LEA  BX,XLTBL
                              MOV  AL,ASCNO
                              XLAT
          
          Команда  XLAT использует значение  в регистре  AL в качестве
          относительного aдреса в таблице,  т.е. складывает адрес в BX
          и смещение в AL. Если, например, ASCNO содержит 00, то адрес
          байта в таблице будет XLTBL+00  и команда XLAT заменит 00 на
          шест.40  из таблицы.  Если  поле ASCNO  cодержит шест.32, то
          адрес соответствующего байта в таблице будет  XLTBL+50. Этот
          байт содержит  шест.F2  (2  в коде EBCDIC),  который команда
          XLAT загружает в регистр AL.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
               Рис.14.4. Преобразование ASCII в EBCDIC.
          
             В   программе   на   рис.14.4   добавлено  преобразование
          десятичной точки (2E) и знака минус (2D) из кода ASCII в код
          EBCDIC  (4B и 60  соответственно).  В  программе организован
          цикл для обработки шестибайтового поля.  Поле ASCNO в начале
          выполнения  программы содержит  значение  31.5 с последующим
          пробелом,  или шест.2D33312E3520. В конце выполнения програм
          мы в поле EBCNO  должно быть шест. 60F3F14BF540.
             
          ПРОГРАММА: ОТОБРАЖЕНИЕ ШЕСТ. И ASCII-КОДОВ
          ------------------------------------------------------------
          
             Программа,  приведенная на рис.14.5, отображает на экране
          почти все ASCII-символы, а также их шест.значения. Например,
          ASCII-символ для шест.53 - это буква S, эти данные программа
          выводит в виде 53 S. Полное изображение на экране выглядит в
          виде матрицы 16х16:
             
                    00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
                    .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
                    .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
                    .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
                    F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF
              
          ------------------------------------------------------------

          
          Ассемблер для IBM PC. Глава 14                            31


          ------------------------------------------------------------
               Рис.14.5. Отображение шест. и ASCII-кодов
          
             Как было  показано  еще  на  рис.8.1,  отображение ASCII-
          символов,  oсобых  проблем  не  вызывает.  Что  же  касается
          отображения шест.значений в символах ASCII,  то этот процесс
          более сложный.  Например,  для вывода на экран  в коде ASCII
          шест. 00, 01 и т.д. необходимо преобразовать шест.00 в шест.
          3030, шест.01 в шест.3031 и т.д.
             В программе начальное значение поля HEXCTR  равно 00. Это
          значение  последовательно  увеличивается   на  1.  Процедура
          C10HEX   расщепляет   байт   HEXCTR   на   две   щест.цифры.
          Предположим,  что байт  HEXCTR содержит шест.  4F. Процедура
          сначала выделяет шест.цифру 4  и использует это значение для
          перекодировки по таблице XLATAB. В регистре AL устанавливает
          ся в  результате значение шест.34.  Затем процедура выделяет
          вторую  шест.цифру  F  и   перекодирует  ее  в   шест.46.  В
          результате oбработки получается шест.3446,  что отображается
          на экране как 4F.
             Так  как  функция  DOS  для  вывода  на  экран  (шест.40)
          рассматривает  шест.1A  как  конец  файла,  то  в  программе
          это  значение заменяется на  пробел. Программа, использующая
          для вывода  на  экран функцию DOS (шест.09),  дожна заменять
          символ ограничитель '$' на пробел.
             Существует   много   различных   способов  преобразования
          шест.цифр  в  ASCII-символы.  Можно  поэкспериментировать  с
          операциями сдвига и сравнения.
          
          ПРОГРАММА: СОРТИРОВКА ЭЛЕМЕНТОВ ТАБЛИЦЫ
          ------------------------------------------------------------
             
             Часто   возникает   необходимость   сортировки  элементов
          таблицы  в  восходящем  или  нисходящем  порядке.  Например,
          пользователю   может   потребоваться   список   наименований
          товара  в  алфавитном   порядке  или  список  общих   цен  в
          нисходящей последовательности.  Обычно,  табличные данные не
          определяются как в  предыдущей  программе,  а  загружаются с
          клавиатуры  или с диска.  Данный  раздел посвящен сортировке
          элементов   таблицы,   что  касается  различных  применений,
          включающих сортировку записей на  дисках,  то здесь возможны
          более сложные программы.
             Существует  несколько  алгоритмов  сортировки  таблиц  от
          неэффективных,  но  понятных,  до эффективных  и непонятных.
          Программа сортировки,  предлагаемая в данном разделе, весьма
          эффективна  и может  применяться  для  большенства табличных
          сортировок.  Конечно,  если не проверить различные алгоритмы
          сортировок,  то  даже  самая  неэффективная  программа может
          показаться  работающей  со  скоростью света.  Но цель данной
          книги  -  показать  технику  ассемблера,  а  не  сортировки.
          Основной подход  заключается в сравнении  соседних элементов
          таблицы.  Если  первый  элемент больше  второго, то элементы
          меняются  местами.   Таким  образом   выполняется  сравнение
          элементов  1  со  2,  2  с  3  и  т.д.  до  конца  таблицы с

          
          Ассемблер для IBM PC. Глава 14                            32


          перестановкой  элементов там,  где  это  необходимо.  Если в
          проходе были сделаны перестановки, то весь процесс повторяет
          ся  с начала  таблицы т.е.  сравниваются снова элементы 1-2,
          2-3  и т.д.  Если в проходе не было перестановок, то таблица
          отсортирована и можно прекратить процесс.
             Ниже  приведен  алгоритм,   в   котором  переменная  SWAP
          является индикатором:  была перестановка элементов (YES) или
          нет (NO):
             
             G10:   Определить адрес последнего элемента
             G20:   Установить SWAP=NO
                    Определить адрес первого элемента
             G30:   Элемент > следующего элемента?
                         Да:  Представить элементы
                              Установить SWAP=YES
                    Перейти к следующему элементу
                    Конец таблицы?
                         Нет: Перейти на G30
                         Да:  SWAP=YES?
                              Да:  Перейти на G20 (повторить сорт.)
                              Нет: Конец сортировки
             
             Программа,  показанная  на рис.14.6,  обеспечивает ввод с
          клавиатуры до 30  имен,  сортировку введенных имен в алфавит
          ном порядке и вывод на экран отсортированного списка имен.
          
          ------------------------------------------------------------
          ------------------------------------------------------------
                    Рис.14.6. Сортировка таблицы имен.
          
          ОПЕРАТОРЫ ТИПА, ДЛИНА И РАЗМЕРА
          ------------------------------------------------------------
             
             Ассемблер  содержит  ряд специальных  операторов, которые
          могут  оказаться полезными  при  программировании. Например,
          при   изменении   длины   таблицы   придется  модифицировать
          программу  (для  нового  определения  таблицы)  и процедуры,
          проверяющие  конец  таблицы.  В  этом  случае  использование
          операторов  TYPE  (тип),  LENGTH  (длина)  и  SIZE  (размер)
          позволяют уменьшить число модифицируемых команд.
             Рассмотрим определение следующей таблицы из десяти слов:
             
                    TABLEX    DW   10 DUP(?) ;Таблица из 10 слов
             
          Программа может использовать  оператор  TYPE для определения
          типа (DW в данном  случае),  оператор LENGTH для определения
          DUP-фактора  (10)  и  оператор  SIZE  для  определения числа
          байтов (10  х  2  =  20). Следующие команды иллюстрируют три
          таких применения:
          
                    MOV  AX,TYPE TABLEX      ;AX=0002
                    MOV  BX,LENGTH TABLEX    ;BX=000A  (10)
                    MOV  CX,SIZE TABLEX      ;CX=0014  (20)

          
          Ассемблер для IBM PC. Глава 14                            33


             
             Значения LENGTH и SIZE  можно использлвать  для окончания
          табличного поиска или сортировки.  Например, если регистр SI
          содержит продвинутый адрес таблицы при осуществлении поиска,
          то проверка на конец таблицы может быть следующий:
             
                         CMP  SI,SIZE TABLEX
             
             В главе  23  "Справочник по директивам ассемблера" дается
          детальное описание операторов TYPE, LENGTH и SIZE.
          
          ОСНОВНЫЕ ПОЛОЖЕНИЯ НА ПАМЯТЬ
          ------------------------------------------------------------
          
          ▀    Для   большинства   применений,   определяйте  таблицы,
               имеющие  родственные  элементы  одной  длины  и формата
               данных.
          
          ▀    Стройте  таблицы на  основе  форматов данных. Например,
               элементы могут  быть  символьные   или  числовые длиной
               один,  два и более байтов каждый. Может оказаться более
               практичным определение двух таблиц: одна, например, для
               трехсимвольных   значений   номеpов,   а   другая   для
               двухбайтовых значений  цен  единиц  товара.  В процессе
               поиска  адрес элементов таблицы номеров  должен увеличи
               ваться на 3, а адрес элементов таблицы цен - на 2. Если
               сохранить число выполненных циклов при поиске на равно,
               то,  умножив это число на  2  (SHL сдвиг влево  на один
               бит),  получим  относительный  адрес  искомого значения
               цены.  (Начальное значение счетчика  циклов должно быть
               равно  -1).
          
          ▀    Помните,  что  DB  позволяет  определять  значения,  не
               превышающие  256,  а  DW  записывает  байты  в обратной
               последовательности.  Команды CMP и  CMPSW предполагают,
               что   байты   в  сравниваемых   словах  имеют  обратную
               последовательность.
          
          ▀    Если таблица подвергается частым изменениям, или должна
               быть доступна нескольким программам,  то запишите ее на
               диск.   Для   внесения   изменений   в   таблицу  можно
               разработать  специальную  программу  модификации. Любые
               программы  могут  загружать  таблицу  с   диска  и  при
               обновлениях  таблицы  сами  программы  не  нуждаются  в
               изменениях.
          
          ▀    Будьте особенно  внимательны при  кодировке сортирующих
               программ.  Пользуйтесь  трассировкой  для тестирования,
               так как малейшая  ошибка может  привести к непредсказуе
               мым результатам.
          
          ВОПРОСЫ ДЛЯ САМОПРОВЕРКИ
          ------------------------------------------------------------

          
          Ассемблер для IBM PC. Глава 14                            34


          
          14.1. Определите  таблицу,   которая  содержит   имена  дней
                недели, начиная с воскресения.
          
          14.2  Предполагая, что воскресенье равно 1, напишите команды
                прямого  доступа  к  таблице,  определенной  в вопросе
                14.1. используйте любые подходящие имена.
          
          14.3  Определите три отдельных связанных таблицы, содержащих
                следующие данные:
                    а) числовые элементы: 06, 10, 14, 21, 24;
                    б) элементы наименований: видеокассеты, приемники,
                модемы, клавиатуры, дискеты;
                    в) цены: 93.95, 82.25, 90.67, 85.80, 13.85.
          
          14.4  Составьте  программу,   позволяющую  вводить  числовой
                элемент (ITEMIN)  и количество  (QTYIN)  с клавиатуры.
                Используя   таблицу  из   вопроса  14.3,  разработайте
                программу табличного  поиска  элемента равного ITEMIN.
                Выделите из  таблиц  наименование  и цену. Рассчитайте
                величину стоимости (Количество  х Цена )  и выдайте на
                экран наименование и стоимость.
          
          14.5  Используя описание таблицы из  вопроса 14.3, составьте
                процедуры:  а) пересылающую содержимое одной таблицы в
                новую  (пустую)  таблицу;  б)  сортирующую  содержимое
                новой таблицы в восходящей последовательности.



























          
