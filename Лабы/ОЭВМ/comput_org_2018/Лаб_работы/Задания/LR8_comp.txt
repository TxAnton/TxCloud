   Задание на лабораторную работу N8 по дисциплине "Архитектура компьютера"                   

        Тема:  Изучение программирования математического
                     сопроцессора i80Х87.


     Разработать подпрограмму на языке Ассемблера, обеспечивающую вычисление 
заданной математической функции с использованием математического сопроцессора.  
Подпрограмма должна вызываться из  головной программы,  разработанной на языке С. 
При этом должны быть обеспечены заданный способ вызова и обмен параметрами.
     Альтернативный вариант реализации:  разработать на языке Ассемблера 
фрагмент программы,  обеспечивающий вычисление заданной математической функции 
с использованием математического сопроцессора,  который включается по принципу 
in-line в программу, разработанную на языке С.
     Возможный пример  требуемой  разработки программы для случая вычисления 
функции fmod(x,y)=x mod y  приведен ниже в приложении 1.

     Выполнить трансляцию программы с подготовкой ее ассемблерной версии и 
отладочной информации. Для выбранного контрольного набора исходных  данных  
прогнать программу под управлением отладчика. При этом для каждой команды 
сопроцессора следует  фиксировать содержимое  используемых  ячеек памяти,  
регистров ЦП и численных регистров сопроцессора до и после выполнения этой команды.

Проверить корректность выполнения вычислений для нескольких наборов исходных данных.

Примечание:  При разработке программ вычисления заданной функции можно воспользоваться
версиями соответствующих программ, взятыми из каталога FLOW_PNT.


                 В А Р И А Н Т Ы     З А Д А Н И Й


     ВАРИАНТ 1.


/*------------------------------------------------------------------------
 * filename - poly.cas
 *
 * function(s)
 *        poly - generates a polynomial from arguments
 *-----------------------------------------------------------------------*/

Name            poly - generates a polynomial from arguments

Usage           double  poly(double x, int n, double c []);

Prototype in    math.h

Description     poly  generates  a  polynomial  in  x,  of  degree  n, with
                coefficients c[0],  c[1], ..., c[n].  For example, if  n=4,
                the generated polynomial is

                        c[4].x^4 + c[3].x^3 + c[2].x^2] + c[1].x + c[0]

                The polynomial is calculated using Horner's method:

                        polynom = (..((x.c[n] + c[n-1]).x + c[n-2])..).x + c[0]

Return value    poly returns the  value of the polynomial as  evaluated for
                the given x.
                If n < 0  then the result is a domain error.
                A range error occurs if the result exceeds double range.

*---------------------------------------------------------------------------*/


     ВАРИАНТ 2.

/*------------------------------------------------------------------------
 * filename - cosh.cas
 *
 * function(s)
/*------------------------------------------------------------------------

Name            cosh - hyperbolic function:
                cosh (x) = (exp(x) + exp(-x)) / 2

Usage           double cosh(double x);

Prototype in    math.h

Description     cosh computes the hyperbolic cosine of the input value.

Return value    cosh returns the hyperbolic cosine of the input value.
                For  large arguments  (magnitude greater  than or  equal to
                710.475)  the result  will be  HUGE_VAL of  the appropriate
                sign and errno will be set to:
                        ERANGE  Range error.

                cosh is more accurately calculated by the polynomial

                      (1 + x^2/2)

                when x is tiny (|x| < 2^-13).
*---------------------------------------------------------------------------*/


     ВАРИАНТ 3.

/*------------------------------------------------------------------------
 * filename - sinh.cas
 *
 * function(s)
 *        sinh - hyperbolic sine function
 *-----------------------------------------------------------------------*/

Name            sinh - hyperbolic sine function

Usage           double sinh(double x);

Prototype in    math.h

Description     sinh computes the hyperbolic sine of the input value.

Return value    sinh returns the hyperbolic sine of the input value.
                For large arguments (magnitude greater than or equal to
                710.475) the result will be an EDOM error.

*---------------------------------------------------------------------------*/

/*
Algorithm.

The usual formula is:
        sinh(x) = .5*(exp(x) - exp(-x))
but there is a loss of precision in using this formula directly near 0.

Since sinh(-x) = -sinh(x), compute sinh(|x|) and adjust the sign later.

If 0 <= x < 2^-33, return x.

If x >= 710.475 call matherr.

If x >= .3465, use
        y = exp(x)
        sinh(x) = (y - 1/y)/2

If 2^-33 <= x < .3465, use
        y = exp(x) - 1
        sinh(x) = (y + y/(1 + y))/2
where special chip functions are used to get exp(x)-1 accurately.

*/


     ВАРИАНТ 4.

/*------------------------------------------------------------------------
 * filename - tanh.cas
 *
 * function(s)
 *        tanh - hyperbolic tangent function
 *-----------------------------------------------------------------------*/

Name            tanh - hyperbolic tangent function

Usage           double tanh(double x);

Prototype in    math.h

Description     tanh calculates the hyperbolic tangent of the input.

Return value    tanh returns the hyperbolic tangent of the input value.
                For large arguments (magnitude greater than 32) the result
                will be +1.0 or -1.0.

*---------------------------------------------------------------------------*/

/*
Algorithm.

The usual formula is:
        tanh(x) = (exp(x) - exp(-x))/(exp(x) + exp(-x))/
but there is a loss of precision in using this formula directly near 0.

Since tanh(-x) = -tanh(x), compute tanh(|x|) and adjust the sign later.

If 0 <= x < 2^-33, return x.

If x >= 32 return 1.

If x >= .17325, use
        y = exp(x)
        tanh(x) = (y - 1/y)/(y + 1/y)

If 2^-33 <= x < .17325, use
        y = exp(2x) - 1
        sinh(x) = y/(2 + y)
where special chip functions are used to get exp(2x)-1 accurately.

*/


     ВАРИАНТ 5.

/*------------------------------------------------------------------------
 * filename - ldexp.cas
 *
 * function(s)
 *        ldexp - calculates value * 2^exp
 *-----------------------------------------------------------------------*/

Name            ldexp - calculates value * 2^exp

Usage           double ldexp(double value, int exp);

Prototype in    math.h

Description     ldexp calculates value * 2^exp

Return value    ldexp returns value * 2^exp
                Overflows return HUGE_VAL * sign(value), underflows return 0.0,
                in both cases with errno set to ERANGE.

*---------------------------------------------------------------------------*/


     ВАРИАНТ 6-7. (6-acos, 7-asin)

/*------------------------------------------------------------------------
 * filename - acosasin.cas
 *
 * function(s)
 *        AcosAsin - compute acos or asin
 *        acos     - trigonometric function
 *        asin     - trigonometric function
 *-----------------------------------------------------------------------*/

typedef unsigned short  bits16;

*---------------------------------------------------------------------*/
Name            AcosAsin - compute sin or cos

Usage           double AcosAsin (char *whoS, bits16 flags, double *xP);

Prototype in    math.h

Description     Computes acos or asin of the number pointed to by xP.
                Arguments to  asin and acos must be in the range -1 to 1.
                Arguments outside that range will cause asin or acos
                to return 0 and set errno to:
                        EDOM    Domain error

Return value    Returns acos or asin of xP.
                acos returns a value in the range 0 to pi.
                asin returns a value in the range -pi/2 to pi/2.

*---------------------------------------------------------------------*/

static double near AcosAsin (char *whoS, bits16 flags, double *xP)
{
        volatile bits16 status;
/*
  Для вычисления Acos :    return  AcosAsin ("acos", 0xFF, &x);
  Для вычисления Asin :    return  AcosAsin ("asin", 0x00, &x);
/*

/*
  Use the trig identities: asin (x) = atan (x / sqrt (1 - x^2)) ;
                           acos (x) = atan (sqrt (1-x^2) / x), which is
  the inverse of the tangent ratio used for asin (x).
*/



_________________________________________________________________________




                        П Р И Л О Ж Е Н И Е   1.


/*------------------------------------------------------------------------
 * filename - fmod.cas
 * function(s)
 *        fmod - вычисляет x по модулю y, остаток от  x/y
 *-----------------------------------------------------------------------*/

#pragma inline
#include <asmrules.h>
#include <_math.h>
#include <math.h>

/*--------------------------------------------------------------------------*

Имя             fmod - вычисляет x по модулю y,  остаток от  x/y

Использование   double fmod(double x, double y);

Прототип в...   math.h

Описание        fmod вычисляет  x - (y * int(x / y));
                Эта разность может быть вычислена более  точно  с
                использованием  команды FPREM, повторяющейся в цикле.
                Например:

                 while (not finished)  result = fprem (x, y)

                Но это будет медленнее,  если отношение x/y велико.

Возвращаемое    fmod  возвращает  значение  x по модулю y, получаемое
значение        как описано выше

*---------------------------------------------------------------------------*/
#pragma warn -rvl
double  _FARFUNC fmod (double x, double y)
{
asm     FLD     DOUBLE (y)

asm     mov     ax, y [6]
asm     shl     ax, 1              /* Игнорируется знаковый бит */
asm     jz      mod_resultZero     /* Если делитель равен 0 */
asm     cmp     ax, 0FFE0h
asm     jnb     mod_isX            /* Если делитель - бесконечность */

asm     FLD     DOUBLE (x)

asm     mov     ax, x [6]
asm     shl     ax, 1
asm     jz      mod_xZero          /* Если делимое равно 0  */
asm     cmp     ax, 0FFE0h
asm     jnb     mod_overflow       /* Если делимое - бесконечность */

mod_keepTrying:
asm     FPREM
asm     push    bx
asm     mov     bx, sp
asm     FSTSW   W0 (SS_ [bx])      /* C2 будет установлен, если еще не конец */
asm     FWAIT
asm     pop     ax
asm     sahf
asm     jp      mod_keepTrying     /* C2 бит отображается на флаг четности */

asm     FSTP    st(1)              /* сбросить  делитель */

mod_end:
        return;

/*
  Если делитель - бесконечность, то возвращаем делимое.
*/
mod_isX:
asm     FSTP    st(0)                   /* pop y off the stack */
asm     FLD     DOUBLE (x)
asm     jmp     short   mod_end

/*
  Все другие формы бесконечности отображаются в 0.
*/
mod_xZero:
mod_overflow:
asm     FSTP    st(0)                   /* pop x off the stack */
mod_resultZero:
asm     FSTP    st(0)                   /* pop y off the stack */
asm     FLDZ
asm     jmp     short   mod_end
}
#pragma warn .rvl



