extern double F(double);
/******************************************************************/
/*            Функция F(X) , задаваемая пользователем             */
/******************************************************************/

#ifdef __NEWTON
extern double F1(double);
/******************************************************************/
/*      Производная функции F(X) , задаваемая пользователем       */
/******************************************************************/
#endif

#ifdef __ITER
extern double PHI(double);
/******************************************************************/
/*            Функция PHI(X) , задаваемая пользователем           */
/*               Данная функция используется в методе             */
/*                       простых итераций                         */
/******************************************************************/
#endif

double Round(double, double);
/******************************************************************/
/*   Функция Round (X, Delta) , предназначена для округления      */
/*                   X с точностью Delta                          */
/******************************************************************/

double BISECT(double, double, double, int&);
/******************************************************************/
/*    Функция BISECT предназначена для решения уравнения F(X)=0   */
/*    методом деления отрезка пополам. Использованы обозначения:  */
/*      Left - левый конец промежутка                             */
/*      Right - правый конец промежутка                           */
/*      Eps - погрешность вычисления корня уравнения;             */
/*      N - число итераций                                        */
/******************************************************************/

double ITER(double, double, int&);
/******************************************************************/
/*    Функция ITER предназначена для решения уравнения F(X)=X     */
/*      методом простой итерации. Использованы обозначения:       */
/*      X0 - начальное приближение корня                          */
/*      Eps - погрешность вычисления корня уравнения;             */
/*      N - число итераций                                        */
/******************************************************************/

double HORDA(double, double, double, int&);
/******************************************************************/
/*    Функция HORDA предназначена для решения уравнения F(x)=0    */
/*      методом хорд. Использованы обозначения:                   */
/*      Left - левый конец промежутка                             */
/*      Right - правый конец промежутка                           */
/*      Eps - погрешность вычисления корня уравнения;             */
/*      N - число итераций                                        */
/******************************************************************/

double NEWTON(double, double, int&);
/******************************************************************/
/*  Функция NEWTON предназначена для решения уравнения F(X)=0     */
/*        методом касательных. Использованы обозначения:          */
/*      X - начальное приближение корня                           */
/*      Eps - погрешность вычисления корня уравнения;             */
/*      N - число итераций                                        */
/******************************************************************/